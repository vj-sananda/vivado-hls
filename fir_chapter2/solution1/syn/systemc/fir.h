// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.op
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _fir_HH_
#define _fir_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "fir_mac_muladd_10bkb.h"
#include "fir_shift_reg_V.h"
#include "fir_c.h"

namespace ap_rtl {

struct fir : public sc_module {
    // Port declarations 9
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<8> > y_V;
    sc_out< sc_logic > y_V_ap_vld;
    sc_in< sc_lv<8> > x_V;


    // Module declarations
    fir(sc_module_name name);
    SC_HAS_PROCESS(fir);

    ~fir();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    fir_shift_reg_V* shift_reg_V_U;
    fir_c* c_U;
    fir_mac_muladd_10bkb<1,1,10,8,18,18>* fir_mac_muladd_10bkb_U1;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<4> > shift_reg_V_address0;
    sc_signal< sc_logic > shift_reg_V_ce0;
    sc_signal< sc_logic > shift_reg_V_we0;
    sc_signal< sc_lv<8> > shift_reg_V_d0;
    sc_signal< sc_lv<8> > shift_reg_V_q0;
    sc_signal< sc_lv<4> > shift_reg_V_address1;
    sc_signal< sc_logic > shift_reg_V_ce1;
    sc_signal< sc_logic > shift_reg_V_we1;
    sc_signal< sc_lv<8> > shift_reg_V_q1;
    sc_signal< sc_lv<4> > c_address0;
    sc_signal< sc_logic > c_ce0;
    sc_signal< sc_lv<10> > c_q0;
    sc_signal< sc_lv<4> > c_address1;
    sc_signal< sc_logic > c_ce1;
    sc_signal< sc_lv<10> > c_q1;
    sc_signal< sc_lv<19> > p_s_reg_155;
    sc_signal< sc_lv<4> > i_1_reg_167;
    sc_signal< sc_lv<4> > shift_reg_V_addr_reg_303;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > tmp_fu_178_p2;
    sc_signal< sc_lv<4> > i_2_1_cast_fu_219_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > tmp_4_fu_225_p2;
    sc_signal< sc_lv<1> > tmp_4_reg_318;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage0;
    sc_signal< bool > ap_block_state5_pp1_stage0_iter0;
    sc_signal< bool > ap_block_state6_pp1_stage0_iter1;
    sc_signal< bool > ap_block_pp1_stage0_11001;
    sc_signal< sc_lv<4> > i_3_1_fu_249_p2;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter0;
    sc_signal< sc_lv<19> > acc_V_1_fu_280_p2;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter1;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< bool > ap_block_pp1_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp1_exit_iter0_state5;
    sc_signal< sc_lv<4> > i_reg_143;
    sc_signal< bool > ap_block_pp1_stage0;
    sc_signal< sc_lv<64> > tmp_3_fu_194_p1;
    sc_signal< sc_lv<64> > tmp_3_1_fu_209_p1;
    sc_signal< sc_lv<64> > tmp_s_fu_214_p1;
    sc_signal< sc_lv<64> > tmp_5_fu_231_p1;
    sc_signal< sc_lv<64> > tmp_5_1_fu_243_p1;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<4> > i_2_fu_188_p2;
    sc_signal< sc_lv<5> > i_cast_fu_184_p1;
    sc_signal< sc_lv<5> > i_2_1_fu_199_p2;
    sc_signal< sc_lv<32> > i_2_1_cast2_fu_205_p1;
    sc_signal< sc_lv<4> > i_3_fu_237_p2;
    sc_signal< sc_lv<10> > r_V_1_fu_271_p0;
    sc_signal< sc_lv<8> > r_V_1_fu_271_p1;
    sc_signal< sc_lv<18> > grp_fu_291_p3;
    sc_signal< sc_lv<19> > p_cast_fu_277_p1;
    sc_signal< sc_lv<18> > grp_fu_291_p2;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp1;
    sc_signal< sc_logic > ap_enable_pp1;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_pp1_stage0;
    static const sc_lv<6> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_4;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<4> ap_const_lv4_A;
    static const sc_lv<19> ap_const_lv19_0;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<5> ap_const_lv5_1E;
    static const sc_lv<4> ap_const_lv4_E;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_acc_V_1_fu_280_p2();
    void thread_ap_CS_fsm_pp1_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_pp1_stage0();
    void thread_ap_block_pp1_stage0_11001();
    void thread_ap_block_pp1_stage0_subdone();
    void thread_ap_block_state5_pp1_stage0_iter0();
    void thread_ap_block_state6_pp1_stage0_iter1();
    void thread_ap_condition_pp1_exit_iter0_state5();
    void thread_ap_done();
    void thread_ap_enable_pp1();
    void thread_ap_idle();
    void thread_ap_idle_pp1();
    void thread_ap_ready();
    void thread_c_address0();
    void thread_c_address1();
    void thread_c_ce0();
    void thread_c_ce1();
    void thread_grp_fu_291_p2();
    void thread_i_2_1_cast2_fu_205_p1();
    void thread_i_2_1_cast_fu_219_p2();
    void thread_i_2_1_fu_199_p2();
    void thread_i_2_fu_188_p2();
    void thread_i_3_1_fu_249_p2();
    void thread_i_3_fu_237_p2();
    void thread_i_cast_fu_184_p1();
    void thread_p_cast_fu_277_p1();
    void thread_r_V_1_fu_271_p0();
    void thread_r_V_1_fu_271_p1();
    void thread_shift_reg_V_address0();
    void thread_shift_reg_V_address1();
    void thread_shift_reg_V_ce0();
    void thread_shift_reg_V_ce1();
    void thread_shift_reg_V_d0();
    void thread_shift_reg_V_we0();
    void thread_shift_reg_V_we1();
    void thread_tmp_3_1_fu_209_p1();
    void thread_tmp_3_fu_194_p1();
    void thread_tmp_4_fu_225_p2();
    void thread_tmp_5_1_fu_243_p1();
    void thread_tmp_5_fu_231_p1();
    void thread_tmp_fu_178_p2();
    void thread_tmp_s_fu_214_p1();
    void thread_y_V();
    void thread_y_V_ap_vld();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
