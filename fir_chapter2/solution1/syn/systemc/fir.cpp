// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.op
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "fir.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic fir::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic fir::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> fir::ap_ST_fsm_state1 = "1";
const sc_lv<6> fir::ap_ST_fsm_state2 = "10";
const sc_lv<6> fir::ap_ST_fsm_state3 = "100";
const sc_lv<6> fir::ap_ST_fsm_state4 = "1000";
const sc_lv<6> fir::ap_ST_fsm_pp1_stage0 = "10000";
const sc_lv<6> fir::ap_ST_fsm_state7 = "100000";
const sc_lv<32> fir::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool fir::ap_const_boolean_1 = true;
const sc_lv<32> fir::ap_const_lv32_1 = "1";
const sc_lv<1> fir::ap_const_lv1_0 = "0";
const sc_lv<32> fir::ap_const_lv32_2 = "10";
const sc_lv<32> fir::ap_const_lv32_4 = "100";
const bool fir::ap_const_boolean_0 = false;
const sc_lv<32> fir::ap_const_lv32_3 = "11";
const sc_lv<1> fir::ap_const_lv1_1 = "1";
const sc_lv<4> fir::ap_const_lv4_A = "1010";
const sc_lv<19> fir::ap_const_lv19_0 = "0000000000000000000";
const sc_lv<32> fir::ap_const_lv32_5 = "101";
const sc_lv<4> fir::ap_const_lv4_0 = "0000";
const sc_lv<4> fir::ap_const_lv4_F = "1111";
const sc_lv<5> fir::ap_const_lv5_1E = "11110";
const sc_lv<4> fir::ap_const_lv4_E = "1110";

fir::fir(sc_module_name name) : sc_module(name), mVcdFile(0) {
    shift_reg_V_U = new fir_shift_reg_V("shift_reg_V_U");
    shift_reg_V_U->clk(ap_clk);
    shift_reg_V_U->reset(ap_rst);
    shift_reg_V_U->address0(shift_reg_V_address0);
    shift_reg_V_U->ce0(shift_reg_V_ce0);
    shift_reg_V_U->we0(shift_reg_V_we0);
    shift_reg_V_U->d0(shift_reg_V_d0);
    shift_reg_V_U->q0(shift_reg_V_q0);
    shift_reg_V_U->address1(shift_reg_V_address1);
    shift_reg_V_U->ce1(shift_reg_V_ce1);
    shift_reg_V_U->we1(shift_reg_V_we1);
    shift_reg_V_U->d1(shift_reg_V_q0);
    shift_reg_V_U->q1(shift_reg_V_q1);
    c_U = new fir_c("c_U");
    c_U->clk(ap_clk);
    c_U->reset(ap_rst);
    c_U->address0(c_address0);
    c_U->ce0(c_ce0);
    c_U->q0(c_q0);
    c_U->address1(c_address1);
    c_U->ce1(c_ce1);
    c_U->q1(c_q1);
    fir_mac_muladd_10bkb_U1 = new fir_mac_muladd_10bkb<1,1,10,8,18,18>("fir_mac_muladd_10bkb_U1");
    fir_mac_muladd_10bkb_U1->din0(c_q0);
    fir_mac_muladd_10bkb_U1->din1(shift_reg_V_q1);
    fir_mac_muladd_10bkb_U1->din2(grp_fu_291_p2);
    fir_mac_muladd_10bkb_U1->dout(grp_fu_291_p3);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_acc_V_1_fu_280_p2);
    sensitive << ( p_s_reg_155 );
    sensitive << ( p_cast_fu_277_p1 );

    SC_METHOD(thread_ap_CS_fsm_pp1_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp1_stage0);

    SC_METHOD(thread_ap_block_pp1_stage0_11001);

    SC_METHOD(thread_ap_block_pp1_stage0_subdone);

    SC_METHOD(thread_ap_block_state5_pp1_stage0_iter0);

    SC_METHOD(thread_ap_block_state6_pp1_stage0_iter1);

    SC_METHOD(thread_ap_condition_pp1_exit_iter0_state5);
    sensitive << ( tmp_4_fu_225_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_ap_enable_pp1);
    sensitive << ( ap_idle_pp1 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp1);
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_c_address0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( tmp_5_fu_231_p1 );

    SC_METHOD(thread_c_address1);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( tmp_5_1_fu_243_p1 );

    SC_METHOD(thread_c_ce0);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter0 );

    SC_METHOD(thread_c_ce1);
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter0 );

    SC_METHOD(thread_grp_fu_291_p2);
    sensitive << ( tmp_4_reg_318 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( r_V_1_fu_271_p0 );
    sensitive << ( r_V_1_fu_271_p1 );

    SC_METHOD(thread_i_2_1_cast2_fu_205_p1);
    sensitive << ( i_2_1_fu_199_p2 );

    SC_METHOD(thread_i_2_1_cast_fu_219_p2);
    sensitive << ( i_reg_143 );

    SC_METHOD(thread_i_2_1_fu_199_p2);
    sensitive << ( i_cast_fu_184_p1 );

    SC_METHOD(thread_i_2_fu_188_p2);
    sensitive << ( i_reg_143 );

    SC_METHOD(thread_i_3_1_fu_249_p2);
    sensitive << ( i_1_reg_167 );

    SC_METHOD(thread_i_3_fu_237_p2);
    sensitive << ( i_1_reg_167 );

    SC_METHOD(thread_i_cast_fu_184_p1);
    sensitive << ( i_reg_143 );

    SC_METHOD(thread_p_cast_fu_277_p1);
    sensitive << ( grp_fu_291_p3 );

    SC_METHOD(thread_r_V_1_fu_271_p0);
    sensitive << ( c_q1 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0 );

    SC_METHOD(thread_r_V_1_fu_271_p1);
    sensitive << ( shift_reg_V_q0 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter1 );
    sensitive << ( ap_block_pp1_stage0 );

    SC_METHOD(thread_shift_reg_V_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( shift_reg_V_addr_reg_303 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( tmp_3_fu_194_p1 );
    sensitive << ( tmp_5_1_fu_243_p1 );

    SC_METHOD(thread_shift_reg_V_address1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_block_pp1_stage0 );
    sensitive << ( tmp_3_1_fu_209_p1 );
    sensitive << ( tmp_s_fu_214_p1 );
    sensitive << ( tmp_5_fu_231_p1 );

    SC_METHOD(thread_shift_reg_V_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter0 );

    SC_METHOD(thread_shift_reg_V_ce1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter0 );

    SC_METHOD(thread_shift_reg_V_d0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( x_V );
    sensitive << ( shift_reg_V_q1 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_shift_reg_V_we0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_shift_reg_V_we1);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_tmp_3_1_fu_209_p1);
    sensitive << ( i_2_1_cast2_fu_205_p1 );

    SC_METHOD(thread_tmp_3_fu_194_p1);
    sensitive << ( i_2_fu_188_p2 );

    SC_METHOD(thread_tmp_4_fu_225_p2);
    sensitive << ( i_1_reg_167 );
    sensitive << ( ap_CS_fsm_pp1_stage0 );
    sensitive << ( ap_block_pp1_stage0_11001 );
    sensitive << ( ap_enable_reg_pp1_iter0 );

    SC_METHOD(thread_tmp_5_1_fu_243_p1);
    sensitive << ( i_3_fu_237_p2 );

    SC_METHOD(thread_tmp_5_fu_231_p1);
    sensitive << ( i_1_reg_167 );

    SC_METHOD(thread_tmp_fu_178_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_143 );

    SC_METHOD(thread_tmp_s_fu_214_p1);
    sensitive << ( i_reg_143 );

    SC_METHOD(thread_y_V);
    sensitive << ( p_s_reg_155 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_y_V_ap_vld);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_178_p2 );
    sensitive << ( tmp_4_fu_225_p2 );
    sensitive << ( ap_enable_reg_pp1_iter0 );
    sensitive << ( ap_block_pp1_stage0_subdone );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000001";
    ap_enable_reg_pp1_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp1_iter1 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fir_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, y_V, "(port)y_V");
    sc_trace(mVcdFile, y_V_ap_vld, "(port)y_V_ap_vld");
    sc_trace(mVcdFile, x_V, "(port)x_V");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, shift_reg_V_address0, "shift_reg_V_address0");
    sc_trace(mVcdFile, shift_reg_V_ce0, "shift_reg_V_ce0");
    sc_trace(mVcdFile, shift_reg_V_we0, "shift_reg_V_we0");
    sc_trace(mVcdFile, shift_reg_V_d0, "shift_reg_V_d0");
    sc_trace(mVcdFile, shift_reg_V_q0, "shift_reg_V_q0");
    sc_trace(mVcdFile, shift_reg_V_address1, "shift_reg_V_address1");
    sc_trace(mVcdFile, shift_reg_V_ce1, "shift_reg_V_ce1");
    sc_trace(mVcdFile, shift_reg_V_we1, "shift_reg_V_we1");
    sc_trace(mVcdFile, shift_reg_V_q1, "shift_reg_V_q1");
    sc_trace(mVcdFile, c_address0, "c_address0");
    sc_trace(mVcdFile, c_ce0, "c_ce0");
    sc_trace(mVcdFile, c_q0, "c_q0");
    sc_trace(mVcdFile, c_address1, "c_address1");
    sc_trace(mVcdFile, c_ce1, "c_ce1");
    sc_trace(mVcdFile, c_q1, "c_q1");
    sc_trace(mVcdFile, p_s_reg_155, "p_s_reg_155");
    sc_trace(mVcdFile, i_1_reg_167, "i_1_reg_167");
    sc_trace(mVcdFile, shift_reg_V_addr_reg_303, "shift_reg_V_addr_reg_303");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_fu_178_p2, "tmp_fu_178_p2");
    sc_trace(mVcdFile, i_2_1_cast_fu_219_p2, "i_2_1_cast_fu_219_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_4_fu_225_p2, "tmp_4_fu_225_p2");
    sc_trace(mVcdFile, tmp_4_reg_318, "tmp_4_reg_318");
    sc_trace(mVcdFile, ap_CS_fsm_pp1_stage0, "ap_CS_fsm_pp1_stage0");
    sc_trace(mVcdFile, ap_block_state5_pp1_stage0_iter0, "ap_block_state5_pp1_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state6_pp1_stage0_iter1, "ap_block_state6_pp1_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp1_stage0_11001, "ap_block_pp1_stage0_11001");
    sc_trace(mVcdFile, i_3_1_fu_249_p2, "i_3_1_fu_249_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter0, "ap_enable_reg_pp1_iter0");
    sc_trace(mVcdFile, acc_V_1_fu_280_p2, "acc_V_1_fu_280_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp1_iter1, "ap_enable_reg_pp1_iter1");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_block_pp1_stage0_subdone, "ap_block_pp1_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp1_exit_iter0_state5, "ap_condition_pp1_exit_iter0_state5");
    sc_trace(mVcdFile, i_reg_143, "i_reg_143");
    sc_trace(mVcdFile, ap_block_pp1_stage0, "ap_block_pp1_stage0");
    sc_trace(mVcdFile, tmp_3_fu_194_p1, "tmp_3_fu_194_p1");
    sc_trace(mVcdFile, tmp_3_1_fu_209_p1, "tmp_3_1_fu_209_p1");
    sc_trace(mVcdFile, tmp_s_fu_214_p1, "tmp_s_fu_214_p1");
    sc_trace(mVcdFile, tmp_5_fu_231_p1, "tmp_5_fu_231_p1");
    sc_trace(mVcdFile, tmp_5_1_fu_243_p1, "tmp_5_1_fu_243_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, i_2_fu_188_p2, "i_2_fu_188_p2");
    sc_trace(mVcdFile, i_cast_fu_184_p1, "i_cast_fu_184_p1");
    sc_trace(mVcdFile, i_2_1_fu_199_p2, "i_2_1_fu_199_p2");
    sc_trace(mVcdFile, i_2_1_cast2_fu_205_p1, "i_2_1_cast2_fu_205_p1");
    sc_trace(mVcdFile, i_3_fu_237_p2, "i_3_fu_237_p2");
    sc_trace(mVcdFile, r_V_1_fu_271_p0, "r_V_1_fu_271_p0");
    sc_trace(mVcdFile, r_V_1_fu_271_p1, "r_V_1_fu_271_p1");
    sc_trace(mVcdFile, grp_fu_291_p3, "grp_fu_291_p3");
    sc_trace(mVcdFile, p_cast_fu_277_p1, "p_cast_fu_277_p1");
    sc_trace(mVcdFile, grp_fu_291_p2, "grp_fu_291_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp1, "ap_idle_pp1");
    sc_trace(mVcdFile, ap_enable_pp1, "ap_enable_pp1");
#endif

    }
    mHdltvinHandle.open("fir.hdltvin.dat");
    mHdltvoutHandle.open("fir.hdltvout.dat");
}

fir::~fir() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete shift_reg_V_U;
    delete c_U;
    delete fir_mac_muladd_10bkb_U1;
}

void fir::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state5.read()))) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            ap_enable_reg_pp1_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp1_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp1_exit_iter0_state5.read()))) {
            ap_enable_reg_pp1_iter1 = (ap_condition_pp1_exit_iter0_state5.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp1_iter1 = ap_enable_reg_pp1_iter0.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            ap_enable_reg_pp1_iter1 = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_1_reg_167 = ap_const_lv4_A;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_4_fu_225_p2.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()))) {
        i_1_reg_167 = i_3_1_fu_249_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_reg_143 = i_2_1_cast_fu_219_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_143 = ap_const_lv4_A;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        p_s_reg_155 = ap_const_lv19_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter1.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, tmp_4_reg_318.read()))) {
        p_s_reg_155 = acc_V_1_fu_280_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_178_p2.read(), ap_const_lv1_0))) {
        shift_reg_V_addr_reg_303 =  (sc_lv<4>) (tmp_3_fu_194_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_4_reg_318 = tmp_4_fu_225_p2.read();
    }
}

void fir::thread_acc_V_1_fu_280_p2() {
    acc_V_1_fu_280_p2 = (!p_s_reg_155.read().is_01() || !p_cast_fu_277_p1.read().is_01())? sc_lv<19>(): (sc_biguint<19>(p_s_reg_155.read()) + sc_bigint<19>(p_cast_fu_277_p1.read()));
}

void fir::thread_ap_CS_fsm_pp1_stage0() {
    ap_CS_fsm_pp1_stage0 = ap_CS_fsm.read()[4];
}

void fir::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void fir::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void fir::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void fir::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void fir::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[5];
}

void fir::thread_ap_block_pp1_stage0() {
    ap_block_pp1_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void fir::thread_ap_block_pp1_stage0_11001() {
    ap_block_pp1_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void fir::thread_ap_block_pp1_stage0_subdone() {
    ap_block_pp1_stage0_subdone = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void fir::thread_ap_block_state5_pp1_stage0_iter0() {
    ap_block_state5_pp1_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void fir::thread_ap_block_state6_pp1_stage0_iter1() {
    ap_block_state6_pp1_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void fir::thread_ap_condition_pp1_exit_iter0_state5() {
    if (esl_seteq<1,1,1>(tmp_4_fu_225_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp1_exit_iter0_state5 = ap_const_logic_1;
    } else {
        ap_condition_pp1_exit_iter0_state5 = ap_const_logic_0;
    }
}

void fir::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void fir::thread_ap_enable_pp1() {
    ap_enable_pp1 = (ap_idle_pp1.read() ^ ap_const_logic_1);
}

void fir::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void fir::thread_ap_idle_pp1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp1_iter1.read()))) {
        ap_idle_pp1 = ap_const_logic_1;
    } else {
        ap_idle_pp1 = ap_const_logic_0;
    }
}

void fir::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void fir::thread_c_address0() {
    c_address0 =  (sc_lv<4>) (tmp_5_fu_231_p1.read());
}

void fir::thread_c_address1() {
    c_address1 =  (sc_lv<4>) (tmp_5_1_fu_243_p1.read());
}

void fir::thread_c_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()))) {
        c_ce0 = ap_const_logic_1;
    } else {
        c_ce0 = ap_const_logic_0;
    }
}

void fir::thread_c_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()))) {
        c_ce1 = ap_const_logic_1;
    } else {
        c_ce1 = ap_const_logic_0;
    }
}

void fir::thread_grp_fu_291_p2() {
    grp_fu_291_p2 = (!r_V_1_fu_271_p0.read().is_01() || !r_V_1_fu_271_p1.read().is_01())? sc_lv<18>(): sc_bigint<10>(r_V_1_fu_271_p0.read()) * sc_bigint<8>(r_V_1_fu_271_p1.read());
}

void fir::thread_i_2_1_cast2_fu_205_p1() {
    i_2_1_cast2_fu_205_p1 = esl_sext<32,5>(i_2_1_fu_199_p2.read());
}

void fir::thread_i_2_1_cast_fu_219_p2() {
    i_2_1_cast_fu_219_p2 = (!i_reg_143.read().is_01() || !ap_const_lv4_E.is_01())? sc_lv<4>(): (sc_biguint<4>(i_reg_143.read()) + sc_bigint<4>(ap_const_lv4_E));
}

void fir::thread_i_2_1_fu_199_p2() {
    i_2_1_fu_199_p2 = (!i_cast_fu_184_p1.read().is_01() || !ap_const_lv5_1E.is_01())? sc_lv<5>(): (sc_biguint<5>(i_cast_fu_184_p1.read()) + sc_bigint<5>(ap_const_lv5_1E));
}

void fir::thread_i_2_fu_188_p2() {
    i_2_fu_188_p2 = (!i_reg_143.read().is_01() || !ap_const_lv4_F.is_01())? sc_lv<4>(): (sc_biguint<4>(i_reg_143.read()) + sc_bigint<4>(ap_const_lv4_F));
}

void fir::thread_i_3_1_fu_249_p2() {
    i_3_1_fu_249_p2 = (!i_1_reg_167.read().is_01() || !ap_const_lv4_E.is_01())? sc_lv<4>(): (sc_biguint<4>(i_1_reg_167.read()) + sc_bigint<4>(ap_const_lv4_E));
}

void fir::thread_i_3_fu_237_p2() {
    i_3_fu_237_p2 = (!i_1_reg_167.read().is_01() || !ap_const_lv4_F.is_01())? sc_lv<4>(): (sc_biguint<4>(i_1_reg_167.read()) + sc_bigint<4>(ap_const_lv4_F));
}

void fir::thread_i_cast_fu_184_p1() {
    i_cast_fu_184_p1 = esl_zext<5,4>(i_reg_143.read());
}

void fir::thread_p_cast_fu_277_p1() {
    p_cast_fu_277_p1 = esl_sext<19,18>(grp_fu_291_p3.read());
}

void fir::thread_r_V_1_fu_271_p0() {
    r_V_1_fu_271_p0 = c_q1.read();
}

void fir::thread_r_V_1_fu_271_p1() {
    r_V_1_fu_271_p1 = shift_reg_V_q0.read();
}

void fir::thread_shift_reg_V_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0))) {
        shift_reg_V_address0 =  (sc_lv<4>) (tmp_5_1_fu_243_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        shift_reg_V_address0 = shift_reg_V_addr_reg_303.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        shift_reg_V_address0 =  (sc_lv<4>) (tmp_3_fu_194_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        shift_reg_V_address0 = ap_const_lv4_0;
    } else {
        shift_reg_V_address0 = "XXXX";
    }
}

void fir::thread_shift_reg_V_address1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp1_stage0.read(), ap_const_boolean_0))) {
        shift_reg_V_address1 =  (sc_lv<4>) (tmp_5_fu_231_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        shift_reg_V_address1 =  (sc_lv<4>) (tmp_s_fu_214_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        shift_reg_V_address1 =  (sc_lv<4>) (tmp_3_1_fu_209_p1.read());
    } else {
        shift_reg_V_address1 = "XXXX";
    }
}

void fir::thread_shift_reg_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)))) {
        shift_reg_V_ce0 = ap_const_logic_1;
    } else {
        shift_reg_V_ce0 = ap_const_logic_0;
    }
}

void fir::thread_shift_reg_V_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp1_stage0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp1_stage0_11001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read())))) {
        shift_reg_V_ce1 = ap_const_logic_1;
    } else {
        shift_reg_V_ce1 = ap_const_logic_0;
    }
}

void fir::thread_shift_reg_V_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        shift_reg_V_d0 = shift_reg_V_q1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        shift_reg_V_d0 = x_V.read();
    } else {
        shift_reg_V_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void fir::thread_shift_reg_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)))) {
        shift_reg_V_we0 = ap_const_logic_1;
    } else {
        shift_reg_V_we0 = ap_const_logic_0;
    }
}

void fir::thread_shift_reg_V_we1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        shift_reg_V_we1 = ap_const_logic_1;
    } else {
        shift_reg_V_we1 = ap_const_logic_0;
    }
}

void fir::thread_tmp_3_1_fu_209_p1() {
    tmp_3_1_fu_209_p1 = esl_zext<64,32>(i_2_1_cast2_fu_205_p1.read());
}

void fir::thread_tmp_3_fu_194_p1() {
    tmp_3_fu_194_p1 = esl_zext<64,4>(i_2_fu_188_p2.read());
}

void fir::thread_tmp_4_fu_225_p2() {
    tmp_4_fu_225_p2 = (!i_1_reg_167.read().is_01() || !ap_const_lv4_0.is_01())? sc_lv<1>(): sc_lv<1>(i_1_reg_167.read() == ap_const_lv4_0);
}

void fir::thread_tmp_5_1_fu_243_p1() {
    tmp_5_1_fu_243_p1 = esl_zext<64,4>(i_3_fu_237_p2.read());
}

void fir::thread_tmp_5_fu_231_p1() {
    tmp_5_fu_231_p1 = esl_zext<64,4>(i_1_reg_167.read());
}

void fir::thread_tmp_fu_178_p2() {
    tmp_fu_178_p2 = (!i_reg_143.read().is_01() || !ap_const_lv4_0.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_143.read() == ap_const_lv4_0);
}

void fir::thread_tmp_s_fu_214_p1() {
    tmp_s_fu_214_p1 = esl_zext<64,4>(i_reg_143.read());
}

void fir::thread_y_V() {
    y_V = p_s_reg_155.read().range(8-1, 0);
}

void fir::thread_y_V_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        y_V_ap_vld = ap_const_logic_1;
    } else {
        y_V_ap_vld = ap_const_logic_0;
    }
}

void fir::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_fu_178_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            break;
        case 16 : 
            if (!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(tmp_4_fu_225_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp1_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp1_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(tmp_4_fu_225_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<6>) ("XXXXXX");
            break;
    }
}

void fir::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y_V\" :  \"" << y_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y_V_ap_vld\" :  \"" << y_V_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x_V\" :  \"" << x_V.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

