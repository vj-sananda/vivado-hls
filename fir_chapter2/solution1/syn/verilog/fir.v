// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.op
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir,hls_ip_2017_4_op,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcvu9p-fsgd2104-3-e,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.267062,HLS_SYN_LAT=19,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=1,HLS_SYN_FF=60,HLS_SYN_LUT=332}" *)

module fir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        y_V,
        y_V_ap_vld,
        x_V
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_pp1_stage0 = 6'd16;
parameter    ap_ST_fsm_state7 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] y_V;
output   y_V_ap_vld;
input  [7:0] x_V;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg y_V_ap_vld;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] shift_reg_V_address0;
reg    shift_reg_V_ce0;
reg    shift_reg_V_we0;
reg   [7:0] shift_reg_V_d0;
wire   [7:0] shift_reg_V_q0;
reg   [3:0] shift_reg_V_address1;
reg    shift_reg_V_ce1;
reg    shift_reg_V_we1;
wire  signed [7:0] shift_reg_V_q1;
wire   [3:0] c_address0;
reg    c_ce0;
wire  signed [9:0] c_q0;
wire   [3:0] c_address1;
reg    c_ce1;
wire   [9:0] c_q1;
reg   [18:0] p_s_reg_155;
reg   [3:0] i_1_reg_167;
reg   [3:0] shift_reg_V_addr_reg_303;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_178_p2;
wire   [3:0] i_2_1_cast_fu_219_p2;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_4_fu_225_p2;
reg   [0:0] tmp_4_reg_318;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state5_pp1_stage0_iter0;
wire    ap_block_state6_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [3:0] i_3_1_fu_249_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [18:0] acc_V_1_fu_280_p2;
reg    ap_enable_reg_pp1_iter1;
wire    ap_CS_fsm_state4;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state5;
reg   [3:0] i_reg_143;
wire    ap_block_pp1_stage0;
wire   [63:0] tmp_3_fu_194_p1;
wire   [63:0] tmp_3_1_fu_209_p1;
wire   [63:0] tmp_s_fu_214_p1;
wire   [63:0] tmp_5_fu_231_p1;
wire   [63:0] tmp_5_1_fu_243_p1;
wire    ap_CS_fsm_state7;
wire   [3:0] i_2_fu_188_p2;
wire   [4:0] i_cast_fu_184_p1;
wire   [4:0] i_2_1_fu_199_p2;
wire  signed [31:0] i_2_1_cast2_fu_205_p1;
wire   [3:0] i_3_fu_237_p2;
wire  signed [9:0] r_V_1_fu_271_p0;
wire  signed [7:0] r_V_1_fu_271_p1;
wire  signed [17:0] grp_fu_291_p3;
wire  signed [18:0] p_cast_fu_277_p1;
wire   [17:0] grp_fu_291_p2;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

fir_shift_reg_V #(
    .DataWidth( 8 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
shift_reg_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(shift_reg_V_address0),
    .ce0(shift_reg_V_ce0),
    .we0(shift_reg_V_we0),
    .d0(shift_reg_V_d0),
    .q0(shift_reg_V_q0),
    .address1(shift_reg_V_address1),
    .ce1(shift_reg_V_ce1),
    .we1(shift_reg_V_we1),
    .d1(shift_reg_V_q0),
    .q1(shift_reg_V_q1)
);

fir_c #(
    .DataWidth( 10 ),
    .AddressRange( 11 ),
    .AddressWidth( 4 ))
c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(c_address0),
    .ce0(c_ce0),
    .q0(c_q0),
    .address1(c_address1),
    .ce1(c_ce1),
    .q1(c_q1)
);

fir_mac_muladd_10bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 18 ),
    .dout_WIDTH( 18 ))
fir_mac_muladd_10bkb_U1(
    .din0(c_q0),
    .din1(shift_reg_V_q1),
    .din2(grp_fu_291_p2),
    .dout(grp_fu_291_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state5) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state5) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state5);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_1_reg_167 <= 4'd10;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (tmp_4_fu_225_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        i_1_reg_167 <= i_3_1_fu_249_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_143 <= i_2_1_cast_fu_219_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_143 <= 4'd10;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_s_reg_155 <= 19'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (tmp_4_reg_318 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        p_s_reg_155 <= acc_V_1_fu_280_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_178_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shift_reg_V_addr_reg_303 <= tmp_3_fu_194_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_4_reg_318 <= tmp_4_fu_225_p2;
    end
end

always @ (*) begin
    if ((tmp_4_fu_225_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        c_ce0 = 1'b1;
    end else begin
        c_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        c_ce1 = 1'b1;
    end else begin
        c_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        shift_reg_V_address0 = tmp_5_1_fu_243_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        shift_reg_V_address0 = shift_reg_V_addr_reg_303;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        shift_reg_V_address0 = tmp_3_fu_194_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        shift_reg_V_address0 = 4'd0;
    end else begin
        shift_reg_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        shift_reg_V_address1 = tmp_5_fu_231_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        shift_reg_V_address1 = tmp_s_fu_214_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        shift_reg_V_address1 = tmp_3_1_fu_209_p1;
    end else begin
        shift_reg_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        shift_reg_V_ce0 = 1'b1;
    end else begin
        shift_reg_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        shift_reg_V_ce1 = 1'b1;
    end else begin
        shift_reg_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        shift_reg_V_d0 = shift_reg_V_q1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        shift_reg_V_d0 = x_V;
    end else begin
        shift_reg_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        shift_reg_V_we0 = 1'b1;
    end else begin
        shift_reg_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        shift_reg_V_we1 = 1'b1;
    end else begin
        shift_reg_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        y_V_ap_vld = 1'b1;
    end else begin
        y_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_178_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((tmp_4_fu_225_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((tmp_4_fu_225_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign acc_V_1_fu_280_p2 = ($signed(p_s_reg_155) + $signed(p_cast_fu_277_p1));

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state5_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign c_address0 = tmp_5_fu_231_p1;

assign c_address1 = tmp_5_1_fu_243_p1;

assign grp_fu_291_p2 = ($signed(r_V_1_fu_271_p0) * $signed(r_V_1_fu_271_p1));

assign i_2_1_cast2_fu_205_p1 = $signed(i_2_1_fu_199_p2);

assign i_2_1_cast_fu_219_p2 = ($signed(i_reg_143) + $signed(4'd14));

assign i_2_1_fu_199_p2 = ($signed(i_cast_fu_184_p1) + $signed(5'd30));

assign i_2_fu_188_p2 = ($signed(i_reg_143) + $signed(4'd15));

assign i_3_1_fu_249_p2 = ($signed(i_1_reg_167) + $signed(4'd14));

assign i_3_fu_237_p2 = ($signed(i_1_reg_167) + $signed(4'd15));

assign i_cast_fu_184_p1 = i_reg_143;

assign p_cast_fu_277_p1 = grp_fu_291_p3;

assign r_V_1_fu_271_p0 = c_q1;

assign r_V_1_fu_271_p1 = shift_reg_V_q0;

assign tmp_3_1_fu_209_p1 = $unsigned(i_2_1_cast2_fu_205_p1);

assign tmp_3_fu_194_p1 = i_2_fu_188_p2;

assign tmp_4_fu_225_p2 = ((i_1_reg_167 == 4'd0) ? 1'b1 : 1'b0);

assign tmp_5_1_fu_243_p1 = i_3_fu_237_p2;

assign tmp_5_fu_231_p1 = i_1_reg_167;

assign tmp_fu_178_p2 = ((i_reg_143 == 4'd0) ? 1'b1 : 1'b0);

assign tmp_s_fu_214_p1 = i_reg_143;

assign y_V = p_s_reg_155[7:0];

endmodule //fir
