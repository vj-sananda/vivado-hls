// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "p_fir_2ch_int_cpp_li.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic p_fir_2ch_int_cpp_li::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic p_fir_2ch_int_cpp_li::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<2> p_fir_2ch_int_cpp_li::ap_ST_fsm_state1 = "1";
const sc_lv<2> p_fir_2ch_int_cpp_li::ap_ST_fsm_state2 = "10";
const sc_lv<32> p_fir_2ch_int_cpp_li::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> p_fir_2ch_int_cpp_li::ap_const_lv32_1 = "1";
const bool p_fir_2ch_int_cpp_li::ap_const_boolean_1 = true;

p_fir_2ch_int_cpp_li::p_fir_2ch_int_cpp_li(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_run_fu_18 = new run("grp_run_fu_18");
    grp_run_fu_18->ap_clk(ap_clk);
    grp_run_fu_18->ap_rst(ap_rst);
    grp_run_fu_18->ap_start(grp_run_fu_18_ap_start);
    grp_run_fu_18->ap_ce(grp_run_fu_18_ap_ce);
    grp_run_fu_18->ap_done(grp_run_fu_18_ap_done);
    grp_run_fu_18->ap_idle(grp_run_fu_18_ap_idle);
    grp_run_fu_18->ap_ready(grp_run_fu_18_ap_ready);
    grp_run_fu_18->in_V_dout(fir_in_dout);
    grp_run_fu_18->in_V_empty_n(fir_in_empty_n);
    grp_run_fu_18->in_V_read(grp_run_fu_18_in_V_read);
    grp_run_fu_18->out_V_din(grp_run_fu_18_out_V_din);
    grp_run_fu_18->out_V_full_n(fir_out_full_n);
    grp_run_fu_18->out_V_write(grp_run_fu_18_out_V_write);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state1_ignore_call2);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( grp_run_fu_18_ap_done );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( grp_run_fu_18_ap_done );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_fir_in_read);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_run_fu_18_in_V_read );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_fir_out_din);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_run_fu_18_out_V_din );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_fir_out_write);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_run_fu_18_out_V_write );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_grp_run_fu_18_ap_ce);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_grp_run_fu_18_ap_start);
    sensitive << ( ap_reg_grp_run_fu_18_ap_start );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( grp_run_fu_18_ap_done );
    sensitive << ( ap_CS_fsm_state2 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "01";
    ap_reg_grp_run_fu_18_ap_start = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "p_fir_2ch_int_cpp_li_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, fir_in_dout, "(port)fir_in_dout");
    sc_trace(mVcdFile, fir_in_empty_n, "(port)fir_in_empty_n");
    sc_trace(mVcdFile, fir_in_read, "(port)fir_in_read");
    sc_trace(mVcdFile, fir_out_din, "(port)fir_out_din");
    sc_trace(mVcdFile, fir_out_full_n, "(port)fir_out_full_n");
    sc_trace(mVcdFile, fir_out_write, "(port)fir_out_write");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, grp_run_fu_18_ap_start, "grp_run_fu_18_ap_start");
    sc_trace(mVcdFile, grp_run_fu_18_ap_ce, "grp_run_fu_18_ap_ce");
    sc_trace(mVcdFile, grp_run_fu_18_ap_done, "grp_run_fu_18_ap_done");
    sc_trace(mVcdFile, grp_run_fu_18_ap_idle, "grp_run_fu_18_ap_idle");
    sc_trace(mVcdFile, grp_run_fu_18_ap_ready, "grp_run_fu_18_ap_ready");
    sc_trace(mVcdFile, grp_run_fu_18_in_V_read, "grp_run_fu_18_in_V_read");
    sc_trace(mVcdFile, grp_run_fu_18_out_V_din, "grp_run_fu_18_out_V_din");
    sc_trace(mVcdFile, grp_run_fu_18_out_V_write, "grp_run_fu_18_out_V_write");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ap_block_state1_ignore_call2, "ap_block_state1_ignore_call2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_reg_grp_run_fu_18_ap_start, "ap_reg_grp_run_fu_18_ap_start");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

p_fir_2ch_int_cpp_li::~p_fir_2ch_int_cpp_li() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_run_fu_18;
}

void p_fir_2ch_int_cpp_li::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(grp_run_fu_18_ap_done.read(), ap_const_logic_1))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_grp_run_fu_18_ap_start = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
            ap_reg_grp_run_fu_18_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_run_fu_18_ap_ready.read())) {
            ap_reg_grp_run_fu_18_ap_start = ap_const_logic_0;
        }
    }
}

void p_fir_2ch_int_cpp_li::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void p_fir_2ch_int_cpp_li::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void p_fir_2ch_int_cpp_li::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void p_fir_2ch_int_cpp_li::thread_ap_block_state1_ignore_call2() {
    ap_block_state1_ignore_call2 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void p_fir_2ch_int_cpp_li::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(grp_run_fu_18_ap_done.read(), ap_const_logic_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void p_fir_2ch_int_cpp_li::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void p_fir_2ch_int_cpp_li::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(grp_run_fu_18_ap_done.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void p_fir_2ch_int_cpp_li::thread_fir_in_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        fir_in_read = grp_run_fu_18_in_V_read.read();
    } else {
        fir_in_read = ap_const_logic_0;
    }
}

void p_fir_2ch_int_cpp_li::thread_fir_out_din() {
    fir_out_din = grp_run_fu_18_out_V_din.read();
}

void p_fir_2ch_int_cpp_li::thread_fir_out_write() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        fir_out_write = grp_run_fu_18_out_V_write.read();
    } else {
        fir_out_write = ap_const_logic_0;
    }
}

void p_fir_2ch_int_cpp_li::thread_grp_run_fu_18_ap_ce() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        grp_run_fu_18_ap_ce = ap_const_logic_1;
    } else {
        grp_run_fu_18_ap_ce = ap_const_logic_0;
    }
}

void p_fir_2ch_int_cpp_li::thread_grp_run_fu_18_ap_start() {
    grp_run_fu_18_ap_start = ap_reg_grp_run_fu_18_ap_start.read();
}

void p_fir_2ch_int_cpp_li::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(grp_run_fu_18_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        default : 
            ap_NS_fsm = "XX";
            break;
    }
}

}

