// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module p_fir_2ch_int_cpp_li (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        fir_in_dout,
        fir_in_empty_n,
        fir_in_read,
        fir_out_din,
        fir_out_full_n,
        fir_out_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] fir_in_dout;
input   fir_in_empty_n;
output   fir_in_read;
output  [39:0] fir_out_din;
input   fir_out_full_n;
output   fir_out_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg fir_in_read;
reg fir_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    grp_run_fu_18_ap_start;
reg    grp_run_fu_18_ap_ce;
wire    grp_run_fu_18_ap_done;
wire    grp_run_fu_18_ap_idle;
wire    grp_run_fu_18_ap_ready;
wire    grp_run_fu_18_in_V_read;
wire   [39:0] grp_run_fu_18_out_V_din;
wire    grp_run_fu_18_out_V_write;
reg    ap_block_state1;
reg    ap_block_state1_ignore_call2;
wire    ap_CS_fsm_state2;
reg    ap_reg_grp_run_fu_18_ap_start;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 ap_reg_grp_run_fu_18_ap_start = 1'b0;
end

run grp_run_fu_18(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_run_fu_18_ap_start),
    .ap_ce(grp_run_fu_18_ap_ce),
    .ap_done(grp_run_fu_18_ap_done),
    .ap_idle(grp_run_fu_18_ap_idle),
    .ap_ready(grp_run_fu_18_ap_ready),
    .in_V_dout(fir_in_dout),
    .in_V_empty_n(fir_in_empty_n),
    .in_V_read(grp_run_fu_18_in_V_read),
    .out_V_din(grp_run_fu_18_out_V_din),
    .out_V_full_n(fir_out_full_n),
    .out_V_write(grp_run_fu_18_out_V_write)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_run_fu_18_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_run_fu_18_ap_start <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_reg_grp_run_fu_18_ap_start <= 1'b1;
        end else if ((grp_run_fu_18_ap_ready == 1'b1)) begin
            ap_reg_grp_run_fu_18_ap_start <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((grp_run_fu_18_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_run_fu_18_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        fir_in_read = grp_run_fu_18_in_V_read;
    end else begin
        fir_in_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        fir_out_write = grp_run_fu_18_out_V_write;
    end else begin
        fir_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)))) begin
        grp_run_fu_18_ap_ce = 1'b1;
    end else begin
        grp_run_fu_18_ap_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_run_fu_18_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call2 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign fir_out_din = grp_run_fu_18_out_V_din;

assign grp_run_fu_18_ap_start = ap_reg_grp_run_fu_18_ap_start;

endmodule //p_fir_2ch_int_cpp_li
