// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fir,hls_ip_2017_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=17,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=139,HLS_SYN_LUT=228}" *)

module fir (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r,
        output_r,
        output_r_ap_vld,
        taps_address0,
        taps_ce0,
        taps_q0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] input_r;
output  [31:0] output_r;
output   output_r_ap_vld;
output  [1:0] taps_address0;
output   taps_ce0;
input  [31:0] taps_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_r_ap_vld;
reg taps_ce0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] i_fu_91_p2;
reg   [2:0] i_reg_162;
wire    ap_CS_fsm_state2;
wire  signed [31:0] newSel3_fu_137_p3;
reg  signed [31:0] newSel3_reg_167;
wire   [0:0] exitcond_fu_85_p2;
reg  signed [31:0] taps_load_reg_177;
wire    ap_CS_fsm_state3;
wire   [31:0] tmp_5_fu_145_p2;
reg   [31:0] tmp_5_reg_182;
wire    ap_CS_fsm_state4;
wire   [31:0] result_1_fu_149_p2;
wire    ap_CS_fsm_state5;
reg   [2:0] i_1_reg_61;
reg   [31:0] result_reg_72;
wire   [63:0] tmp_4_fu_97_p1;
wire   [1:0] tmp_fu_102_p1;
wire   [0:0] sel_tmp4_i_fu_118_p2;
wire   [0:0] sel_tmp2_i_fu_112_p2;
wire   [0:0] sel_tmp_i_fu_106_p2;
wire   [0:0] or_cond_fu_124_p2;
wire   [31:0] newSel1_fu_130_p3;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_1_reg_61 <= i_reg_162;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_1_reg_61 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        result_reg_72 <= result_1_fu_149_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        result_reg_72 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_162 <= i_fu_91_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_85_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        newSel3_reg_167 <= newSel3_fu_137_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        taps_load_reg_177 <= taps_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_5_reg_182 <= tmp_5_fu_145_p2;
    end
end

always @ (*) begin
    if (((exitcond_fu_85_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_85_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_85_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        output_r_ap_vld = 1'b1;
    end else begin
        output_r_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        taps_ce0 = 1'b1;
    end else begin
        taps_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_fu_85_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign exitcond_fu_85_p2 = ((i_1_reg_61 == 3'd4) ? 1'b1 : 1'b0);

assign i_fu_91_p2 = (i_1_reg_61 + 3'd1);

assign newSel1_fu_130_p3 = ((sel_tmp_i_fu_106_p2[0:0] === 1'b1) ? input_r : 32'd0);

assign newSel3_fu_137_p3 = ((or_cond_fu_124_p2[0:0] === 1'b1) ? 32'd0 : newSel1_fu_130_p3);

assign or_cond_fu_124_p2 = (sel_tmp4_i_fu_118_p2 | sel_tmp2_i_fu_112_p2);

assign output_r = result_reg_72;

assign result_1_fu_149_p2 = (tmp_5_reg_182 + result_reg_72);

assign sel_tmp2_i_fu_112_p2 = ((tmp_fu_102_p1 == 2'd1) ? 1'b1 : 1'b0);

assign sel_tmp4_i_fu_118_p2 = ((tmp_fu_102_p1 == 2'd2) ? 1'b1 : 1'b0);

assign sel_tmp_i_fu_106_p2 = ((tmp_fu_102_p1 == 2'd0) ? 1'b1 : 1'b0);

assign taps_address0 = tmp_4_fu_97_p1;

assign tmp_4_fu_97_p1 = i_1_reg_61;

assign tmp_5_fu_145_p2 = ($signed(taps_load_reg_177) * $signed(newSel3_reg_167));

assign tmp_fu_102_p1 = i_1_reg_61[1:0];

endmodule //fir
