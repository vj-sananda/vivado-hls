// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "fir.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic fir::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic fir::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> fir::ap_ST_fsm_state1 = "1";
const sc_lv<5> fir::ap_ST_fsm_state2 = "10";
const sc_lv<5> fir::ap_ST_fsm_state3 = "100";
const sc_lv<5> fir::ap_ST_fsm_state4 = "1000";
const sc_lv<5> fir::ap_ST_fsm_state5 = "10000";
const sc_lv<32> fir::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> fir::ap_const_lv32_1 = "1";
const sc_lv<1> fir::ap_const_lv1_0 = "0";
const sc_lv<32> fir::ap_const_lv32_2 = "10";
const sc_lv<32> fir::ap_const_lv32_3 = "11";
const sc_lv<32> fir::ap_const_lv32_4 = "100";
const sc_lv<3> fir::ap_const_lv3_0 = "000";
const sc_lv<1> fir::ap_const_lv1_1 = "1";
const sc_lv<3> fir::ap_const_lv3_4 = "100";
const sc_lv<3> fir::ap_const_lv3_1 = "1";
const sc_lv<2> fir::ap_const_lv2_0 = "00";
const sc_lv<2> fir::ap_const_lv2_1 = "1";
const sc_lv<2> fir::ap_const_lv2_2 = "10";
const bool fir::ap_const_boolean_1 = true;

fir::fir(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_85_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_85_p2 );

    SC_METHOD(thread_exitcond_fu_85_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_1_reg_61 );

    SC_METHOD(thread_i_fu_91_p2);
    sensitive << ( i_1_reg_61 );

    SC_METHOD(thread_newSel1_fu_130_p3);
    sensitive << ( input_r );
    sensitive << ( sel_tmp_i_fu_106_p2 );

    SC_METHOD(thread_newSel3_fu_137_p3);
    sensitive << ( or_cond_fu_124_p2 );
    sensitive << ( newSel1_fu_130_p3 );

    SC_METHOD(thread_or_cond_fu_124_p2);
    sensitive << ( sel_tmp4_i_fu_118_p2 );
    sensitive << ( sel_tmp2_i_fu_112_p2 );

    SC_METHOD(thread_output_r);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_85_p2 );
    sensitive << ( result_reg_72 );

    SC_METHOD(thread_output_r_ap_vld);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_85_p2 );

    SC_METHOD(thread_result_1_fu_149_p2);
    sensitive << ( tmp_5_reg_182 );
    sensitive << ( result_reg_72 );

    SC_METHOD(thread_sel_tmp2_i_fu_112_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_85_p2 );
    sensitive << ( tmp_fu_102_p1 );

    SC_METHOD(thread_sel_tmp4_i_fu_118_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_85_p2 );
    sensitive << ( tmp_fu_102_p1 );

    SC_METHOD(thread_sel_tmp_i_fu_106_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_85_p2 );
    sensitive << ( tmp_fu_102_p1 );

    SC_METHOD(thread_taps_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_4_fu_97_p1 );

    SC_METHOD(thread_taps_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_tmp_4_fu_97_p1);
    sensitive << ( i_1_reg_61 );

    SC_METHOD(thread_tmp_5_fu_145_p2);
    sensitive << ( newSel3_reg_167 );
    sensitive << ( taps_load_reg_177 );

    SC_METHOD(thread_tmp_fu_102_p1);
    sensitive << ( i_1_reg_61 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_85_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fir_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, input_r, "(port)input_r");
    sc_trace(mVcdFile, output_r, "(port)output_r");
    sc_trace(mVcdFile, output_r_ap_vld, "(port)output_r_ap_vld");
    sc_trace(mVcdFile, taps_address0, "(port)taps_address0");
    sc_trace(mVcdFile, taps_ce0, "(port)taps_ce0");
    sc_trace(mVcdFile, taps_q0, "(port)taps_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, i_fu_91_p2, "i_fu_91_p2");
    sc_trace(mVcdFile, i_reg_162, "i_reg_162");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, newSel3_fu_137_p3, "newSel3_fu_137_p3");
    sc_trace(mVcdFile, newSel3_reg_167, "newSel3_reg_167");
    sc_trace(mVcdFile, exitcond_fu_85_p2, "exitcond_fu_85_p2");
    sc_trace(mVcdFile, taps_load_reg_177, "taps_load_reg_177");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_5_fu_145_p2, "tmp_5_fu_145_p2");
    sc_trace(mVcdFile, tmp_5_reg_182, "tmp_5_reg_182");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, result_1_fu_149_p2, "result_1_fu_149_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, i_1_reg_61, "i_1_reg_61");
    sc_trace(mVcdFile, result_reg_72, "result_reg_72");
    sc_trace(mVcdFile, tmp_4_fu_97_p1, "tmp_4_fu_97_p1");
    sc_trace(mVcdFile, tmp_fu_102_p1, "tmp_fu_102_p1");
    sc_trace(mVcdFile, sel_tmp4_i_fu_118_p2, "sel_tmp4_i_fu_118_p2");
    sc_trace(mVcdFile, sel_tmp2_i_fu_112_p2, "sel_tmp2_i_fu_112_p2");
    sc_trace(mVcdFile, sel_tmp_i_fu_106_p2, "sel_tmp_i_fu_106_p2");
    sc_trace(mVcdFile, or_cond_fu_124_p2, "or_cond_fu_124_p2");
    sc_trace(mVcdFile, newSel1_fu_130_p3, "newSel1_fu_130_p3");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("fir.hdltvin.dat");
    mHdltvoutHandle.open("fir.hdltvout.dat");
}

fir::~fir() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void fir::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i_1_reg_61 = i_reg_162.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_1_reg_61 = ap_const_lv3_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        result_reg_72 = result_1_fu_149_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        result_reg_72 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_162 = i_fu_91_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond_fu_85_p2.read(), ap_const_lv1_0))) {
        newSel3_reg_167 = newSel3_fu_137_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        taps_load_reg_177 = taps_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        tmp_5_reg_182 = tmp_5_fu_145_p2.read();
    }
}

void fir::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void fir::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void fir::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void fir::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void fir::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void fir::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_85_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void fir::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void fir::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_85_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void fir::thread_exitcond_fu_85_p2() {
    exitcond_fu_85_p2 = (!i_1_reg_61.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(i_1_reg_61.read() == ap_const_lv3_4);
}

void fir::thread_i_fu_91_p2() {
    i_fu_91_p2 = (!i_1_reg_61.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_1_reg_61.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void fir::thread_newSel1_fu_130_p3() {
    newSel1_fu_130_p3 = (!sel_tmp_i_fu_106_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp_i_fu_106_p2.read()[0].to_bool())? input_r.read(): ap_const_lv32_0);
}

void fir::thread_newSel3_fu_137_p3() {
    newSel3_fu_137_p3 = (!or_cond_fu_124_p2.read()[0].is_01())? sc_lv<32>(): ((or_cond_fu_124_p2.read()[0].to_bool())? ap_const_lv32_0: newSel1_fu_130_p3.read());
}

void fir::thread_or_cond_fu_124_p2() {
    or_cond_fu_124_p2 = (sel_tmp4_i_fu_118_p2.read() | sel_tmp2_i_fu_112_p2.read());
}

void fir::thread_output_r() {
    output_r = result_reg_72.read();
}

void fir::thread_output_r_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_85_p2.read(), ap_const_lv1_1))) {
        output_r_ap_vld = ap_const_logic_1;
    } else {
        output_r_ap_vld = ap_const_logic_0;
    }
}

void fir::thread_result_1_fu_149_p2() {
    result_1_fu_149_p2 = (!tmp_5_reg_182.read().is_01() || !result_reg_72.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_5_reg_182.read()) + sc_biguint<32>(result_reg_72.read()));
}

void fir::thread_sel_tmp2_i_fu_112_p2() {
    sel_tmp2_i_fu_112_p2 = (!tmp_fu_102_p1.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(tmp_fu_102_p1.read() == ap_const_lv2_1);
}

void fir::thread_sel_tmp4_i_fu_118_p2() {
    sel_tmp4_i_fu_118_p2 = (!tmp_fu_102_p1.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(tmp_fu_102_p1.read() == ap_const_lv2_2);
}

void fir::thread_sel_tmp_i_fu_106_p2() {
    sel_tmp_i_fu_106_p2 = (!tmp_fu_102_p1.read().is_01() || !ap_const_lv2_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_fu_102_p1.read() == ap_const_lv2_0);
}

void fir::thread_taps_address0() {
    taps_address0 =  (sc_lv<2>) (tmp_4_fu_97_p1.read());
}

void fir::thread_taps_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        taps_ce0 = ap_const_logic_1;
    } else {
        taps_ce0 = ap_const_logic_0;
    }
}

void fir::thread_tmp_4_fu_97_p1() {
    tmp_4_fu_97_p1 = esl_zext<64,3>(i_1_reg_61.read());
}

void fir::thread_tmp_5_fu_145_p2() {
    tmp_5_fu_145_p2 = (!taps_load_reg_177.read().is_01() || !newSel3_reg_167.read().is_01())? sc_lv<32>(): sc_bigint<32>(taps_load_reg_177.read()) * sc_bigint<32>(newSel3_reg_167.read());
}

void fir::thread_tmp_fu_102_p1() {
    tmp_fu_102_p1 = i_1_reg_61.read().range(2-1, 0);
}

void fir::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond_fu_85_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

void fir::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_r\" :  \"" << input_r.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_r\" :  \"" << output_r.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_r_ap_vld\" :  \"" << output_r_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"taps_address0\" :  \"" << taps_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"taps_ce0\" :  \"" << taps_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"taps_q0\" :  \"" << taps_q0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

