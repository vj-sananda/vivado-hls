// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _fir_HH_
#define _fir_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct fir : public sc_module {
    // Port declarations 12
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > input_r;
    sc_out< sc_lv<32> > output_r;
    sc_out< sc_logic > output_r_ap_vld;
    sc_out< sc_lv<2> > taps_address0;
    sc_out< sc_logic > taps_ce0;
    sc_in< sc_lv<32> > taps_q0;


    // Module declarations
    fir(sc_module_name name);
    SC_HAS_PROCESS(fir);

    ~fir();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<3> > i_fu_91_p2;
    sc_signal< sc_lv<3> > i_reg_162;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<32> > newSel3_fu_137_p3;
    sc_signal< sc_lv<32> > newSel3_reg_167;
    sc_signal< sc_lv<1> > exitcond_fu_85_p2;
    sc_signal< sc_lv<32> > taps_load_reg_177;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > tmp_5_fu_145_p2;
    sc_signal< sc_lv<32> > tmp_5_reg_182;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > result_1_fu_149_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<3> > i_1_reg_61;
    sc_signal< sc_lv<32> > result_reg_72;
    sc_signal< sc_lv<64> > tmp_4_fu_97_p1;
    sc_signal< sc_lv<2> > tmp_fu_102_p1;
    sc_signal< sc_lv<1> > sel_tmp4_i_fu_118_p2;
    sc_signal< sc_lv<1> > sel_tmp2_i_fu_112_p2;
    sc_signal< sc_lv<1> > sel_tmp_i_fu_106_p2;
    sc_signal< sc_lv<1> > or_cond_fu_124_p2;
    sc_signal< sc_lv<32> > newSel1_fu_130_p3;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<2> ap_const_lv2_2;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_exitcond_fu_85_p2();
    void thread_i_fu_91_p2();
    void thread_newSel1_fu_130_p3();
    void thread_newSel3_fu_137_p3();
    void thread_or_cond_fu_124_p2();
    void thread_output_r();
    void thread_output_r_ap_vld();
    void thread_result_1_fu_149_p2();
    void thread_sel_tmp2_i_fu_112_p2();
    void thread_sel_tmp4_i_fu_118_p2();
    void thread_sel_tmp_i_fu_106_p2();
    void thread_taps_address0();
    void thread_taps_ce0();
    void thread_tmp_4_fu_97_p1();
    void thread_tmp_5_fu_145_p2();
    void thread_tmp_fu_102_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
