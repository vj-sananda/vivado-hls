// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "multi_counter.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic multi_counter::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic multi_counter::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> multi_counter::ap_ST_fsm_state1 = "1";
const sc_lv<3> multi_counter::ap_ST_fsm_state2 = "10";
const sc_lv<3> multi_counter::ap_ST_fsm_state3 = "100";
const sc_lv<32> multi_counter::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<3> multi_counter::ap_const_lv3_3 = "11";
const sc_lv<3> multi_counter::ap_const_lv3_2 = "10";
const sc_lv<3> multi_counter::ap_const_lv3_1 = "1";
const sc_lv<1> multi_counter::ap_const_lv1_0 = "0";
const sc_lv<32> multi_counter::ap_const_lv32_1 = "1";
const sc_lv<32> multi_counter::ap_const_lv32_2 = "10";
const sc_lv<32> multi_counter::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";
const bool multi_counter::ap_const_boolean_1 = true;

multi_counter::multi_counter(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_CNT_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( cmd_read_read_fu_54_p2 );
    sensitive << ( cmd_read_reg_140 );
    sensitive << ( CNT_addr_2_reg_144 );
    sensitive << ( CNT_addr_1_reg_149 );
    sensitive << ( tmp_4_fu_111_p1 );
    sensitive << ( tmp_2_fu_116_p1 );
    sensitive << ( tmp_1_fu_121_p1 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_CNT_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( cmd_read_read_fu_54_p2 );
    sensitive << ( cmd_read_reg_140 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_CNT_d0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( data );
    sensitive << ( cmd_read_read_fu_54_p2 );
    sensitive << ( cmd_read_reg_140 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_5_fu_126_p2 );
    sensitive << ( tmp_3_fu_133_p2 );

    SC_METHOD(thread_CNT_we0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( cmd_read_read_fu_54_p2 );
    sensitive << ( cmd_read_reg_140 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_cmd_read_read_fu_54_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( cmd );

    SC_METHOD(thread_out_r);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_out_r_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_out_valid);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_out_valid_ap_vld);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_tmp_1_fu_121_p1);
    sensitive << ( id );

    SC_METHOD(thread_tmp_2_fu_116_p1);
    sensitive << ( id );

    SC_METHOD(thread_tmp_3_fu_133_p2);
    sensitive << ( CNT_q0 );

    SC_METHOD(thread_tmp_4_fu_111_p1);
    sensitive << ( id );

    SC_METHOD(thread_tmp_5_fu_126_p2);
    sensitive << ( CNT_q0 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "multi_counter_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, CNT_address0, "(port)CNT_address0");
    sc_trace(mVcdFile, CNT_ce0, "(port)CNT_ce0");
    sc_trace(mVcdFile, CNT_we0, "(port)CNT_we0");
    sc_trace(mVcdFile, CNT_d0, "(port)CNT_d0");
    sc_trace(mVcdFile, CNT_q0, "(port)CNT_q0");
    sc_trace(mVcdFile, id, "(port)id");
    sc_trace(mVcdFile, cmd, "(port)cmd");
    sc_trace(mVcdFile, data, "(port)data");
    sc_trace(mVcdFile, out_r, "(port)out_r");
    sc_trace(mVcdFile, out_r_ap_vld, "(port)out_r_ap_vld");
    sc_trace(mVcdFile, out_valid, "(port)out_valid");
    sc_trace(mVcdFile, out_valid_ap_vld, "(port)out_valid_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, cmd_read_read_fu_54_p2, "cmd_read_read_fu_54_p2");
    sc_trace(mVcdFile, cmd_read_reg_140, "cmd_read_reg_140");
    sc_trace(mVcdFile, CNT_addr_2_reg_144, "CNT_addr_2_reg_144");
    sc_trace(mVcdFile, CNT_addr_1_reg_149, "CNT_addr_1_reg_149");
    sc_trace(mVcdFile, tmp_4_fu_111_p1, "tmp_4_fu_111_p1");
    sc_trace(mVcdFile, tmp_2_fu_116_p1, "tmp_2_fu_116_p1");
    sc_trace(mVcdFile, tmp_1_fu_121_p1, "tmp_1_fu_121_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_5_fu_126_p2, "tmp_5_fu_126_p2");
    sc_trace(mVcdFile, tmp_3_fu_133_p2, "tmp_3_fu_133_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("multi_counter.hdltvin.dat");
    mHdltvoutHandle.open("multi_counter.hdltvout.dat");
}

multi_counter::~multi_counter() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void multi_counter::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,3,3>(cmd_read_read_fu_54_p2.read(), ap_const_lv3_2))) {
        CNT_addr_1_reg_149 =  (sc_lv<8>) (tmp_2_fu_116_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && esl_seteq<1,3,3>(cmd_read_read_fu_54_p2.read(), ap_const_lv3_3))) {
        CNT_addr_2_reg_144 =  (sc_lv<8>) (tmp_4_fu_111_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        cmd_read_reg_140 = cmd.read();
    }
}

void multi_counter::thread_CNT_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,3,3>(cmd_read_reg_140.read(), ap_const_lv3_2))) {
        CNT_address0 = CNT_addr_1_reg_149.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,3,3>(cmd_read_reg_140.read(), ap_const_lv3_3))) {
        CNT_address0 = CNT_addr_2_reg_144.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,3,3>(cmd_read_read_fu_54_p2.read(), ap_const_lv3_1))) {
        CNT_address0 =  (sc_lv<8>) (tmp_1_fu_121_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,3,3>(cmd_read_read_fu_54_p2.read(), ap_const_lv3_2))) {
        CNT_address0 =  (sc_lv<8>) (tmp_2_fu_116_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,3,3>(cmd_read_read_fu_54_p2.read(), ap_const_lv3_3))) {
        CNT_address0 =  (sc_lv<8>) (tmp_4_fu_111_p1.read());
    } else {
        CNT_address0 = "XXXXXXXX";
    }
}

void multi_counter::thread_CNT_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,3,3>(cmd_read_read_fu_54_p2.read(), ap_const_lv3_3)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,3,3>(cmd_read_read_fu_54_p2.read(), ap_const_lv3_2)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,3,3>(cmd_read_read_fu_54_p2.read(), ap_const_lv3_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,3,3>(cmd_read_reg_140.read(), ap_const_lv3_3)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,3,3>(cmd_read_reg_140.read(), ap_const_lv3_2)))) {
        CNT_ce0 = ap_const_logic_1;
    } else {
        CNT_ce0 = ap_const_logic_0;
    }
}

void multi_counter::thread_CNT_d0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,3,3>(cmd_read_reg_140.read(), ap_const_lv3_2))) {
        CNT_d0 = tmp_3_fu_133_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,3,3>(cmd_read_reg_140.read(), ap_const_lv3_3))) {
        CNT_d0 = tmp_5_fu_126_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,3,3>(cmd_read_read_fu_54_p2.read(), ap_const_lv3_1))) {
        CNT_d0 = data.read();
    } else {
        CNT_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void multi_counter::thread_CNT_we0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1) && 
          esl_seteq<1,3,3>(cmd_read_read_fu_54_p2.read(), ap_const_lv3_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,3,3>(cmd_read_reg_140.read(), ap_const_lv3_3)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,3,3>(cmd_read_reg_140.read(), ap_const_lv3_2)))) {
        CNT_we0 = ap_const_logic_1;
    } else {
        CNT_we0 = ap_const_logic_0;
    }
}

void multi_counter::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void multi_counter::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void multi_counter::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void multi_counter::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void multi_counter::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void multi_counter::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void multi_counter::thread_cmd_read_read_fu_54_p2() {
    cmd_read_read_fu_54_p2 = cmd.read();
}

void multi_counter::thread_out_r() {
    out_r = ap_const_lv32_0;
}

void multi_counter::thread_out_r_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        out_r_ap_vld = ap_const_logic_1;
    } else {
        out_r_ap_vld = ap_const_logic_0;
    }
}

void multi_counter::thread_out_valid() {
    out_valid = ap_const_lv1_0;
}

void multi_counter::thread_out_valid_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        out_valid_ap_vld = ap_const_logic_1;
    } else {
        out_valid_ap_vld = ap_const_logic_0;
    }
}

void multi_counter::thread_tmp_1_fu_121_p1() {
    tmp_1_fu_121_p1 = esl_sext<64,8>(id.read());
}

void multi_counter::thread_tmp_2_fu_116_p1() {
    tmp_2_fu_116_p1 = esl_sext<64,8>(id.read());
}

void multi_counter::thread_tmp_3_fu_133_p2() {
    tmp_3_fu_133_p2 = (!CNT_q0.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(CNT_q0.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void multi_counter::thread_tmp_4_fu_111_p1() {
    tmp_4_fu_111_p1 = esl_sext<64,8>(id.read());
}

void multi_counter::thread_tmp_5_fu_126_p2() {
    tmp_5_fu_126_p2 = (!CNT_q0.read().is_01() || !ap_const_lv32_FFFFFFFF.is_01())? sc_lv<32>(): (sc_biguint<32>(CNT_q0.read()) + sc_bigint<32>(ap_const_lv32_FFFFFFFF));
}

void multi_counter::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<3>) ("XXX");
            break;
    }
}

void multi_counter::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"CNT_address0\" :  \"" << CNT_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"CNT_ce0\" :  \"" << CNT_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"CNT_we0\" :  \"" << CNT_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"CNT_d0\" :  \"" << CNT_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"CNT_q0\" :  \"" << CNT_q0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"id\" :  \"" << id.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"cmd\" :  \"" << cmd.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"data\" :  \"" << data.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r\" :  \"" << out_r.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_ap_vld\" :  \"" << out_r_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_valid\" :  \"" << out_valid.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_valid_ap_vld\" :  \"" << out_valid_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

