// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// ==============================================================

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <complex>
#include <stdbool.h>
#include "autopilot_cbe.h"
#include "ap_stream.h"
#include "hls_stream.h"
#include "hls_half.h"
#include "hls_signal_handler.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;

// apint = int12
#define int12 short
// apint = int18
#define int18 int
// apint = int22
#define int22 int
// apint = int33
#define int33 long long
// apint = int6
#define int6 char
// apint = uint13
#define uint13 short

// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->


// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "inA"
#define AUTOTB_TVIN_inA  "../tv/cdatafile/c.apint_arith.autotvin_inA.dat"
// wrapc file define: "inB"
#define AUTOTB_TVIN_inB  "../tv/cdatafile/c.apint_arith.autotvin_inB.dat"
// wrapc file define: "inC"
#define AUTOTB_TVIN_inC  "../tv/cdatafile/c.apint_arith.autotvin_inC.dat"
// wrapc file define: "inD"
#define AUTOTB_TVIN_inD  "../tv/cdatafile/c.apint_arith.autotvin_inD.dat"
// wrapc file define: "out1"
#define AUTOTB_TVOUT_out1  "../tv/cdatafile/c.apint_arith.autotvout_out1.dat"
// wrapc file define: "out2"
#define AUTOTB_TVOUT_out2  "../tv/cdatafile/c.apint_arith.autotvout_out2.dat"
// wrapc file define: "out3"
#define AUTOTB_TVOUT_out3  "../tv/cdatafile/c.apint_arith.autotvout_out3.dat"
// wrapc file define: "out4"
#define AUTOTB_TVOUT_out4  "../tv/cdatafile/c.apint_arith.autotvout_out4.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "out1"
#define AUTOTB_TVOUT_PC_out1  "../tv/rtldatafile/rtl.apint_arith.autotvout_out1.dat"
// tvout file define: "out2"
#define AUTOTB_TVOUT_PC_out2  "../tv/rtldatafile/rtl.apint_arith.autotvout_out2.dat"
// tvout file define: "out3"
#define AUTOTB_TVOUT_PC_out3  "../tv/rtldatafile/rtl.apint_arith.autotvout_out3.dat"
// tvout file define: "out4"
#define AUTOTB_TVOUT_PC_out4  "../tv/rtldatafile/rtl.apint_arith.autotvout_out4.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			inA_depth = 0;
			inB_depth = 0;
			inC_depth = 0;
			inD_depth = 0;
			out1_depth = 0;
			out2_depth = 0;
			out3_depth = 0;
			out4_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{inA " << inA_depth << "}\n";
			total_list << "{inB " << inB_depth << "}\n";
			total_list << "{inC " << inC_depth << "}\n";
			total_list << "{inD " << inD_depth << "}\n";
			total_list << "{out1 " << out1_depth << "}\n";
			total_list << "{out2 " << out2_depth << "}\n";
			total_list << "{out3 " << out3_depth << "}\n";
			total_list << "{out4 " << out4_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int inA_depth;
		int inB_depth;
		int inC_depth;
		int inD_depth;
		int out1_depth;
		int out2_depth;
		int out3_depth;
		int out4_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};

extern "C" void apint_arith (
int6 inA,
int12 inB,
int22 inC,
int33 inD,
int18* out1,
uint13* out2,
int22* out3,
int6* out4);

extern "C" void AESL_WRAP_apint_arith (
int6 inA,
int12 inB,
int22 inC,
int33 inD,
int18* out1,
uint13* out2,
int22* out3,
int6* out4)
{
	refine_signal_handler();
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		CodeState = ENTER_WRAPC_PC;
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;


		// output port post check: "out1"
		aesl_fh.read(AUTOTB_TVOUT_PC_out1, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_out1, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_out1, AESL_token); // data

			sc_bv<18> *out1_pc_buffer = new sc_bv<18>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'out1', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'out1', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					out1_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_out1, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_out1))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: out1
				{
					// bitslice(17, 0)
					// {
						// celement: out1(17, 0)
						// {
							sc_lv<18>* out1_lv0_0_0_1 = new sc_lv<18>[1];
						// }
					// }

					// bitslice(17, 0)
					{
						int hls_map_index = 0;
						// celement: out1(17, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(out1[0]) != NULL) // check the null address if the c port is array or others
								{
									out1_lv0_0_0_1[hls_map_index].range(17, 0) = sc_bv<18>(out1_pc_buffer[hls_map_index].range(17, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(17, 0)
					{
						int hls_map_index = 0;
						// celement: out1(17, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : out1[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : out1[0]
								// output_left_conversion : out1[i_0]
								// output_type_conversion : (out1_lv0_0_0_1[hls_map_index]).to_uint64()
								if (&(out1[0]) != NULL) // check the null address if the c port is array or others
								{
									out1[i_0] = (out1_lv0_0_0_1[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] out1_pc_buffer;
		}

		// output port post check: "out2"
		aesl_fh.read(AUTOTB_TVOUT_PC_out2, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_out2, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_out2, AESL_token); // data

			sc_bv<13> *out2_pc_buffer = new sc_bv<13>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'out2', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'out2', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					out2_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_out2, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_out2))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: out2
				{
					// bitslice(12, 0)
					// {
						// celement: out2(12, 0)
						// {
							sc_lv<13>* out2_lv0_0_0_1 = new sc_lv<13>[1];
						// }
					// }

					// bitslice(12, 0)
					{
						int hls_map_index = 0;
						// celement: out2(12, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(out2[0]) != NULL) // check the null address if the c port is array or others
								{
									out2_lv0_0_0_1[hls_map_index].range(12, 0) = sc_bv<13>(out2_pc_buffer[hls_map_index].range(12, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(12, 0)
					{
						int hls_map_index = 0;
						// celement: out2(12, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : out2[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : out2[0]
								// output_left_conversion : out2[i_0]
								// output_type_conversion : (out2_lv0_0_0_1[hls_map_index]).to_uint64()
								if (&(out2[0]) != NULL) // check the null address if the c port is array or others
								{
									out2[i_0] = (out2_lv0_0_0_1[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] out2_pc_buffer;
		}

		// output port post check: "out3"
		aesl_fh.read(AUTOTB_TVOUT_PC_out3, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_out3, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_out3, AESL_token); // data

			sc_bv<22> *out3_pc_buffer = new sc_bv<22>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'out3', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'out3', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					out3_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_out3, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_out3))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: out3
				{
					// bitslice(21, 0)
					// {
						// celement: out3(21, 0)
						// {
							sc_lv<22>* out3_lv0_0_0_1 = new sc_lv<22>[1];
						// }
					// }

					// bitslice(21, 0)
					{
						int hls_map_index = 0;
						// celement: out3(21, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(out3[0]) != NULL) // check the null address if the c port is array or others
								{
									out3_lv0_0_0_1[hls_map_index].range(21, 0) = sc_bv<22>(out3_pc_buffer[hls_map_index].range(21, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(21, 0)
					{
						int hls_map_index = 0;
						// celement: out3(21, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : out3[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : out3[0]
								// output_left_conversion : out3[i_0]
								// output_type_conversion : (out3_lv0_0_0_1[hls_map_index]).to_uint64()
								if (&(out3[0]) != NULL) // check the null address if the c port is array or others
								{
									out3[i_0] = (out3_lv0_0_0_1[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] out3_pc_buffer;
		}

		// output port post check: "out4"
		aesl_fh.read(AUTOTB_TVOUT_PC_out4, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_out4, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_out4, AESL_token); // data

			sc_bv<6> *out4_pc_buffer = new sc_bv<6>[1];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'out4', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'out4', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					out4_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_out4, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_out4))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: out4
				{
					// bitslice(5, 0)
					// {
						// celement: out4(5, 0)
						// {
							sc_lv<6>* out4_lv0_0_0_1 = new sc_lv<6>[1];
						// }
					// }

					// bitslice(5, 0)
					{
						int hls_map_index = 0;
						// celement: out4(5, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								if (&(out4[0]) != NULL) // check the null address if the c port is array or others
								{
									out4_lv0_0_0_1[hls_map_index].range(5, 0) = sc_bv<6>(out4_pc_buffer[hls_map_index].range(5, 0));
									hls_map_index++;
								}
							}
						}
					}

					// bitslice(5, 0)
					{
						int hls_map_index = 0;
						// celement: out4(5, 0)
						{
							// carray: (0) => (0) @ (1)
							for (int i_0 = 0; i_0 <= 0; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : out4[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : out4[0]
								// output_left_conversion : out4[i_0]
								// output_type_conversion : (out4_lv0_0_0_1[hls_map_index]).to_uint64()
								if (&(out4[0]) != NULL) // check the null address if the c port is array or others
								{
									out4[i_0] = (out4_lv0_0_0_1[hls_map_index]).to_uint64();
									hls_map_index++;
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] out4_pc_buffer;
		}

		AESL_transaction_pc++;
	}
	else
	{
		CodeState = ENTER_WRAPC;
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "inA"
		char* tvin_inA = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_inA);

		// "inB"
		char* tvin_inB = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_inB);

		// "inC"
		char* tvin_inC = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_inC);

		// "inD"
		char* tvin_inD = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_inD);

		// "out1"
		char* tvout_out1 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_out1);

		// "out2"
		char* tvout_out2 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_out2);

		// "out3"
		char* tvout_out3 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_out3);

		// "out4"
		char* tvout_out4 = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_out4);

		CodeState = DUMP_INPUTS;
		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// [[transaction]]
		sprintf(tvin_inA, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_inA, tvin_inA);

		sc_bv<6> inA_tvin_wrapc_buffer;

		// RTL Name: inA
		{
			// bitslice(5, 0)
			{
				// celement: inA(5, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : inA
						// sub_1st_elem          : 
						// ori_name_1st_elem     : inA
						// regulate_c_name       : inA
						// input_type_conversion : inA
						if (&(inA) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<6> inA_tmp_mem;
							inA_tmp_mem = inA;
							inA_tvin_wrapc_buffer.range(5, 0) = inA_tmp_mem.range(5, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_inA, "%s\n", (inA_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_inA, tvin_inA);
		}

		tcl_file.set_num(1, &tcl_file.inA_depth);
		sprintf(tvin_inA, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_inA, tvin_inA);

		// [[transaction]]
		sprintf(tvin_inB, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_inB, tvin_inB);

		sc_bv<12> inB_tvin_wrapc_buffer;

		// RTL Name: inB
		{
			// bitslice(11, 0)
			{
				// celement: inB(11, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : inB
						// sub_1st_elem          : 
						// ori_name_1st_elem     : inB
						// regulate_c_name       : inB
						// input_type_conversion : inB
						if (&(inB) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<12> inB_tmp_mem;
							inB_tmp_mem = inB;
							inB_tvin_wrapc_buffer.range(11, 0) = inB_tmp_mem.range(11, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_inB, "%s\n", (inB_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_inB, tvin_inB);
		}

		tcl_file.set_num(1, &tcl_file.inB_depth);
		sprintf(tvin_inB, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_inB, tvin_inB);

		// [[transaction]]
		sprintf(tvin_inC, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_inC, tvin_inC);

		sc_bv<22> inC_tvin_wrapc_buffer;

		// RTL Name: inC
		{
			// bitslice(21, 0)
			{
				// celement: inC(21, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : inC
						// sub_1st_elem          : 
						// ori_name_1st_elem     : inC
						// regulate_c_name       : inC
						// input_type_conversion : inC
						if (&(inC) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<22> inC_tmp_mem;
							inC_tmp_mem = inC;
							inC_tvin_wrapc_buffer.range(21, 0) = inC_tmp_mem.range(21, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_inC, "%s\n", (inC_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_inC, tvin_inC);
		}

		tcl_file.set_num(1, &tcl_file.inC_depth);
		sprintf(tvin_inC, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_inC, tvin_inC);

		// [[transaction]]
		sprintf(tvin_inD, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_inD, tvin_inD);

		sc_bv<33> inD_tvin_wrapc_buffer;

		// RTL Name: inD
		{
			// bitslice(32, 0)
			{
				// celement: inD(32, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : inD
						// sub_1st_elem          : 
						// ori_name_1st_elem     : inD
						// regulate_c_name       : inD
						// input_type_conversion : inD
						if (&(inD) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<33> inD_tmp_mem;
							inD_tmp_mem = inD;
							inD_tvin_wrapc_buffer.range(32, 0) = inD_tmp_mem.range(32, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_inD, "%s\n", (inD_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_inD, tvin_inD);
		}

		tcl_file.set_num(1, &tcl_file.inD_depth);
		sprintf(tvin_inD, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_inD, tvin_inD);

// [call_c_dut] ---------->

		CodeState = CALL_C_DUT;
		apint_arith(inA, inB, inC, inD, out1, out2, out3, out4);

		CodeState = DUMP_OUTPUTS;

		// [[transaction]]
		sprintf(tvout_out1, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_out1, tvout_out1);

		sc_bv<18>* out1_tvout_wrapc_buffer = new sc_bv<18>[1];

		// RTL Name: out1
		{
			// bitslice(17, 0)
			{
				int hls_map_index = 0;
				// celement: out1(17, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : out1[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : out1[0]
						// regulate_c_name       : out1
						// input_type_conversion : out1[i_0]
						if (&(out1[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<18> out1_tmp_mem;
							out1_tmp_mem = out1[i_0];
							out1_tvout_wrapc_buffer[hls_map_index].range(17, 0) = out1_tmp_mem.range(17, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_out1, "%s\n", (out1_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_out1, tvout_out1);
		}

		tcl_file.set_num(1, &tcl_file.out1_depth);
		sprintf(tvout_out1, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_out1, tvout_out1);

		// release memory allocation
		delete [] out1_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_out2, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_out2, tvout_out2);

		sc_bv<13>* out2_tvout_wrapc_buffer = new sc_bv<13>[1];

		// RTL Name: out2
		{
			// bitslice(12, 0)
			{
				int hls_map_index = 0;
				// celement: out2(12, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : out2[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : out2[0]
						// regulate_c_name       : out2
						// input_type_conversion : out2[i_0]
						if (&(out2[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<13> out2_tmp_mem;
							out2_tmp_mem = out2[i_0];
							out2_tvout_wrapc_buffer[hls_map_index].range(12, 0) = out2_tmp_mem.range(12, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_out2, "%s\n", (out2_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_out2, tvout_out2);
		}

		tcl_file.set_num(1, &tcl_file.out2_depth);
		sprintf(tvout_out2, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_out2, tvout_out2);

		// release memory allocation
		delete [] out2_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_out3, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_out3, tvout_out3);

		sc_bv<22>* out3_tvout_wrapc_buffer = new sc_bv<22>[1];

		// RTL Name: out3
		{
			// bitslice(21, 0)
			{
				int hls_map_index = 0;
				// celement: out3(21, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : out3[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : out3[0]
						// regulate_c_name       : out3
						// input_type_conversion : out3[i_0]
						if (&(out3[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<22> out3_tmp_mem;
							out3_tmp_mem = out3[i_0];
							out3_tvout_wrapc_buffer[hls_map_index].range(21, 0) = out3_tmp_mem.range(21, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_out3, "%s\n", (out3_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_out3, tvout_out3);
		}

		tcl_file.set_num(1, &tcl_file.out3_depth);
		sprintf(tvout_out3, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_out3, tvout_out3);

		// release memory allocation
		delete [] out3_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_out4, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_out4, tvout_out4);

		sc_bv<6>* out4_tvout_wrapc_buffer = new sc_bv<6>[1];

		// RTL Name: out4
		{
			// bitslice(5, 0)
			{
				int hls_map_index = 0;
				// celement: out4(5, 0)
				{
					// carray: (0) => (0) @ (1)
					for (int i_0 = 0; i_0 <= 0; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : out4[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : out4[0]
						// regulate_c_name       : out4
						// input_type_conversion : out4[i_0]
						if (&(out4[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<6> out4_tmp_mem;
							out4_tmp_mem = out4[i_0];
							out4_tvout_wrapc_buffer[hls_map_index].range(5, 0) = out4_tmp_mem.range(5, 0);
                                 	       hls_map_index++;
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvout_out4, "%s\n", (out4_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_out4, tvout_out4);
		}

		tcl_file.set_num(1, &tcl_file.out4_depth);
		sprintf(tvout_out4, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_out4, tvout_out4);

		// release memory allocation
		delete [] out4_tvout_wrapc_buffer;

		CodeState = DELETE_CHAR_BUFFERS;
		// release memory allocation: "inA"
		delete [] tvin_inA;
		// release memory allocation: "inB"
		delete [] tvin_inB;
		// release memory allocation: "inC"
		delete [] tvin_inC;
		// release memory allocation: "inD"
		delete [] tvin_inD;
		// release memory allocation: "out1"
		delete [] tvout_out1;
		// release memory allocation: "out2"
		delete [] tvout_out2;
		// release memory allocation: "out3"
		delete [] tvout_out3;
		// release memory allocation: "out4"
		delete [] tvout_out4;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);
	}
}


// apint = int12
#undef int12

// apint = int18
#undef int18

// apint = int22
#undef int22

// apint = int33
#undef int33

// apint = int6
#undef int6

// apint = uint13
#undef uint13
