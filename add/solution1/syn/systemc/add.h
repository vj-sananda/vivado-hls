// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4.op
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _add_HH_
#define _add_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct add : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > a_V_address0;
    sc_out< sc_logic > a_V_ce0;
    sc_in< sc_lv<4> > a_V_q0;
    sc_out< sc_lv<4> > a_V_address1;
    sc_out< sc_logic > a_V_ce1;
    sc_in< sc_lv<4> > a_V_q1;
    sc_out< sc_lv<4> > b_V_address0;
    sc_out< sc_logic > b_V_ce0;
    sc_in< sc_lv<4> > b_V_q0;
    sc_out< sc_lv<4> > b_V_address1;
    sc_out< sc_logic > b_V_ce1;
    sc_in< sc_lv<4> > b_V_q1;
    sc_out< sc_lv<4> > out_V;
    sc_out< sc_logic > out_V_ap_vld;


    // Module declarations
    add(sc_module_name name);
    SC_HAS_PROCESS(add);

    ~add();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage4;
    sc_signal< bool > ap_block_state5_pp0_stage4_iter0;
    sc_signal< bool > ap_block_pp0_stage4_11001;
    sc_signal< sc_lv<4> > reg_243;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< bool > ap_block_state2_pp0_stage1_iter0;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage2;
    sc_signal< bool > ap_block_state3_pp0_stage2_iter0;
    sc_signal< bool > ap_block_pp0_stage2_11001;
    sc_signal< sc_lv<4> > reg_248;
    sc_signal< sc_lv<4> > reg_253;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<4> > b_V_load_1_reg_381;
    sc_signal< sc_lv<4> > tmp1_fu_274_p2;
    sc_signal< sc_lv<4> > tmp1_reg_426;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage3;
    sc_signal< bool > ap_block_state4_pp0_stage3_iter0;
    sc_signal< bool > ap_block_pp0_stage3_11001;
    sc_signal< sc_lv<4> > tmp5_fu_292_p2;
    sc_signal< sc_lv<4> > tmp5_reg_451;
    sc_signal< sc_lv<4> > tmp11_fu_298_p2;
    sc_signal< sc_lv<4> > tmp11_reg_456;
    sc_signal< sc_lv<4> > tmp12_fu_310_p2;
    sc_signal< sc_lv<4> > tmp12_reg_481;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0_reg;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< bool > ap_block_pp0_stage4_subdone;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< bool > ap_block_pp0_stage2;
    sc_signal< bool > ap_block_pp0_stage3;
    sc_signal< bool > ap_block_pp0_stage4;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<4> > tmp4_fu_263_p2;
    sc_signal< sc_lv<4> > tmp3_fu_269_p2;
    sc_signal< sc_lv<4> > grp_fu_257_p2;
    sc_signal< sc_lv<4> > tmp8_fu_280_p2;
    sc_signal< sc_lv<4> > tmp7_fu_286_p2;
    sc_signal< sc_lv<4> > tmp13_fu_304_p2;
    sc_signal< sc_lv<4> > tmp17_fu_330_p2;
    sc_signal< sc_lv<4> > tmp16_fu_336_p2;
    sc_signal< sc_lv<4> > tmp15_fu_324_p2;
    sc_signal< sc_lv<4> > tmp14_fu_342_p2;
    sc_signal< sc_lv<4> > tmp10_fu_320_p2;
    sc_signal< sc_lv<4> > tmp9_fu_348_p2;
    sc_signal< sc_lv<4> > tmp_fu_316_p2;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to0;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_idle_pp0_1to1;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< bool > ap_block_pp0_stage2_subdone;
    sc_signal< bool > ap_block_pp0_stage3_subdone;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_pp0_stage0;
    static const sc_lv<5> ap_ST_fsm_pp0_stage1;
    static const sc_lv<5> ap_ST_fsm_pp0_stage2;
    static const sc_lv<5> ap_ST_fsm_pp0_stage3;
    static const sc_lv<5> ap_ST_fsm_pp0_stage4;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<64> ap_const_lv64_1;
    static const sc_lv<64> ap_const_lv64_2;
    static const sc_lv<64> ap_const_lv64_3;
    static const sc_lv<64> ap_const_lv64_4;
    static const sc_lv<64> ap_const_lv64_5;
    static const sc_lv<64> ap_const_lv64_6;
    static const sc_lv<64> ap_const_lv64_7;
    static const sc_lv<64> ap_const_lv64_8;
    static const sc_lv<64> ap_const_lv64_9;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_a_V_address0();
    void thread_a_V_address1();
    void thread_a_V_ce0();
    void thread_a_V_ce1();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_pp0_stage2();
    void thread_ap_CS_fsm_pp0_stage3();
    void thread_ap_CS_fsm_pp0_stage4();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_pp0_stage2();
    void thread_ap_block_pp0_stage2_11001();
    void thread_ap_block_pp0_stage2_subdone();
    void thread_ap_block_pp0_stage3();
    void thread_ap_block_pp0_stage3_11001();
    void thread_ap_block_pp0_stage3_subdone();
    void thread_ap_block_pp0_stage4();
    void thread_ap_block_pp0_stage4_11001();
    void thread_ap_block_pp0_stage4_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage1_iter0();
    void thread_ap_block_state3_pp0_stage2_iter0();
    void thread_ap_block_state4_pp0_stage3_iter0();
    void thread_ap_block_state5_pp0_stage4_iter0();
    void thread_ap_block_state6_pp0_stage0_iter1();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to0();
    void thread_ap_idle_pp0_1to1();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_b_V_address0();
    void thread_b_V_address1();
    void thread_b_V_ce0();
    void thread_b_V_ce1();
    void thread_grp_fu_257_p2();
    void thread_out_V();
    void thread_out_V_ap_vld();
    void thread_tmp10_fu_320_p2();
    void thread_tmp11_fu_298_p2();
    void thread_tmp12_fu_310_p2();
    void thread_tmp13_fu_304_p2();
    void thread_tmp14_fu_342_p2();
    void thread_tmp15_fu_324_p2();
    void thread_tmp16_fu_336_p2();
    void thread_tmp17_fu_330_p2();
    void thread_tmp1_fu_274_p2();
    void thread_tmp3_fu_269_p2();
    void thread_tmp4_fu_263_p2();
    void thread_tmp5_fu_292_p2();
    void thread_tmp7_fu_286_p2();
    void thread_tmp8_fu_280_p2();
    void thread_tmp9_fu_348_p2();
    void thread_tmp_fu_316_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
