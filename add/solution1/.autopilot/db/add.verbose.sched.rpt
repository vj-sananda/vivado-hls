

================================================================
== Vivado HLS Report for 'add'
================================================================
* Date:           Fri Jan 18 16:51:14 2019

* Version:        2017.4.op (Build 2193837 on Tue Apr 10 18:25:10 MDT 2018)
* Project:        add
* Solution:       solution1
* Product family: virtexuplus
* Target device:  xcvu9p-fsgd2104-3-e-es1


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      1.89|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+----------+
    |  Latency  |  Interval | Pipeline |
    | min | max | min | max |   Type   |
    +-----+-----+-----+-----+----------+
    |    5|    5|    5|    5| function |
    +-----+-----+-----+-----+----------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 0
IsPipeline: 1
IsRtlPipelined: 1
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 5, depth = 6


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 6
* Pipeline : 1
  Pipeline-0 : II = 5, D = 6, States = { 1 2 3 4 5 6 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 

* FSM state operations: 

 <State 1> : 0.54ns
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "%a_V_addr = getelementptr [10 x i4]* %a_V, i64 0, i64 0" [add/add.cpp:9]
ST_1 : Operation 8 [2/2] (0.54ns)   --->   "%a_V_load = load i4* %a_V_addr, align 1" [add/add.cpp:9]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.54> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 4> <Depth = 10> <RAM>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%b_V_addr = getelementptr [10 x i4]* %b_V, i64 0, i64 0" [add/add.cpp:9]
ST_1 : Operation 10 [2/2] (0.54ns)   --->   "%b_V_load = load i4* %b_V_addr, align 1" [add/add.cpp:9]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.54> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 4> <Depth = 10> <RAM>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%a_V_addr_1 = getelementptr [10 x i4]* %a_V, i64 0, i64 1" [add/add.cpp:9]
ST_1 : Operation 12 [2/2] (0.54ns)   --->   "%a_V_load_1 = load i4* %a_V_addr_1, align 1" [add/add.cpp:9]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.54> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 4> <Depth = 10> <RAM>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%b_V_addr_1 = getelementptr [10 x i4]* %b_V, i64 0, i64 1" [add/add.cpp:9]
ST_1 : Operation 14 [2/2] (0.54ns)   --->   "%b_V_load_1 = load i4* %b_V_addr_1, align 1" [add/add.cpp:9]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.54> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 4> <Depth = 10> <RAM>

 <State 2> : 0.54ns
ST_2 : Operation 15 [1/2] (0.54ns)   --->   "%a_V_load = load i4* %a_V_addr, align 1" [add/add.cpp:9]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.54> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 4> <Depth = 10> <RAM>
ST_2 : Operation 16 [1/2] (0.54ns)   --->   "%b_V_load = load i4* %b_V_addr, align 1" [add/add.cpp:9]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.54> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 4> <Depth = 10> <RAM>
ST_2 : Operation 17 [1/2] (0.54ns)   --->   "%a_V_load_1 = load i4* %a_V_addr_1, align 1" [add/add.cpp:9]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.54> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 4> <Depth = 10> <RAM>
ST_2 : Operation 18 [1/2] (0.54ns)   --->   "%b_V_load_1 = load i4* %b_V_addr_1, align 1" [add/add.cpp:9]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.54> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 4> <Depth = 10> <RAM>
ST_2 : Operation 19 [1/1] (0.00ns)   --->   "%a_V_addr_2 = getelementptr [10 x i4]* %a_V, i64 0, i64 2" [add/add.cpp:9]
ST_2 : Operation 20 [2/2] (0.54ns)   --->   "%a_V_load_2 = load i4* %a_V_addr_2, align 1" [add/add.cpp:9]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.54> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 4> <Depth = 10> <RAM>
ST_2 : Operation 21 [1/1] (0.00ns)   --->   "%b_V_addr_2 = getelementptr [10 x i4]* %b_V, i64 0, i64 2" [add/add.cpp:9]
ST_2 : Operation 22 [2/2] (0.54ns)   --->   "%b_V_load_2 = load i4* %b_V_addr_2, align 1" [add/add.cpp:9]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.54> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 4> <Depth = 10> <RAM>
ST_2 : Operation 23 [1/1] (0.00ns)   --->   "%a_V_addr_3 = getelementptr [10 x i4]* %a_V, i64 0, i64 3" [add/add.cpp:9]
ST_2 : Operation 24 [2/2] (0.54ns)   --->   "%a_V_load_3 = load i4* %a_V_addr_3, align 1" [add/add.cpp:9]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.54> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 4> <Depth = 10> <RAM>
ST_2 : Operation 25 [1/1] (0.00ns)   --->   "%b_V_addr_3 = getelementptr [10 x i4]* %b_V, i64 0, i64 3" [add/add.cpp:9]
ST_2 : Operation 26 [2/2] (0.54ns)   --->   "%b_V_load_3 = load i4* %b_V_addr_3, align 1" [add/add.cpp:9]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.54> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 4> <Depth = 10> <RAM>

 <State 3> : 1.22ns
ST_3 : Operation 27 [1/2] (0.54ns)   --->   "%a_V_load_2 = load i4* %a_V_addr_2, align 1" [add/add.cpp:9]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.54> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 4> <Depth = 10> <RAM>
ST_3 : Operation 28 [1/2] (0.54ns)   --->   "%b_V_load_2 = load i4* %b_V_addr_2, align 1" [add/add.cpp:9]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.54> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 4> <Depth = 10> <RAM>
ST_3 : Operation 29 [1/2] (0.54ns)   --->   "%a_V_load_3 = load i4* %a_V_addr_3, align 1" [add/add.cpp:9]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.54> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 4> <Depth = 10> <RAM>
ST_3 : Operation 30 [1/2] (0.54ns)   --->   "%b_V_load_3 = load i4* %b_V_addr_3, align 1" [add/add.cpp:9]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.54> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 4> <Depth = 10> <RAM>
ST_3 : Operation 31 [1/1] (0.00ns)   --->   "%a_V_addr_4 = getelementptr [10 x i4]* %a_V, i64 0, i64 4" [add/add.cpp:9]
ST_3 : Operation 32 [2/2] (0.54ns)   --->   "%a_V_load_4 = load i4* %a_V_addr_4, align 1" [add/add.cpp:9]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.54> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 4> <Depth = 10> <RAM>
ST_3 : Operation 33 [1/1] (0.00ns)   --->   "%b_V_addr_4 = getelementptr [10 x i4]* %b_V, i64 0, i64 4" [add/add.cpp:9]
ST_3 : Operation 34 [2/2] (0.54ns)   --->   "%b_V_load_4 = load i4* %b_V_addr_4, align 1" [add/add.cpp:9]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.54> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 4> <Depth = 10> <RAM>
ST_3 : Operation 35 [1/1] (0.00ns)   --->   "%a_V_addr_5 = getelementptr [10 x i4]* %a_V, i64 0, i64 5" [add/add.cpp:9]
ST_3 : Operation 36 [2/2] (0.54ns)   --->   "%a_V_load_5 = load i4* %a_V_addr_5, align 1" [add/add.cpp:9]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.54> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 4> <Depth = 10> <RAM>
ST_3 : Operation 37 [1/1] (0.00ns)   --->   "%b_V_addr_5 = getelementptr [10 x i4]* %b_V, i64 0, i64 5" [add/add.cpp:9]
ST_3 : Operation 38 [2/2] (0.54ns)   --->   "%b_V_load_5 = load i4* %b_V_addr_5, align 1" [add/add.cpp:9]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.54> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 4> <Depth = 10> <RAM>
ST_3 : Operation 39 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%tmp2 = add i4 %a_V_load, %b_V_load" [add/add.cpp:9]   --->   Core 80 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.16> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 40 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%tmp4 = add i4 %a_V_load_1, %b_V_load_2" [add/add.cpp:9]   --->   Core 80 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.16> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 41 [1/1] (0.33ns) (root node of TernaryAdder)   --->   "%tmp3 = add i4 %tmp4, %b_V_load_1" [add/add.cpp:9]   --->   Core 80 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.16> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_3 : Operation 42 [1/1] (0.33ns) (root node of TernaryAdder)   --->   "%tmp1 = add i4 %tmp3, %tmp2" [add/add.cpp:9]   --->   Core 80 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.16> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>

 <State 4> : 1.22ns
ST_4 : Operation 43 [1/2] (0.54ns)   --->   "%a_V_load_4 = load i4* %a_V_addr_4, align 1" [add/add.cpp:9]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.54> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 4> <Depth = 10> <RAM>
ST_4 : Operation 44 [1/2] (0.54ns)   --->   "%b_V_load_4 = load i4* %b_V_addr_4, align 1" [add/add.cpp:9]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.54> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 4> <Depth = 10> <RAM>
ST_4 : Operation 45 [1/2] (0.54ns)   --->   "%a_V_load_5 = load i4* %a_V_addr_5, align 1" [add/add.cpp:9]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.54> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 4> <Depth = 10> <RAM>
ST_4 : Operation 46 [1/2] (0.54ns)   --->   "%b_V_load_5 = load i4* %b_V_addr_5, align 1" [add/add.cpp:9]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.54> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 4> <Depth = 10> <RAM>
ST_4 : Operation 47 [1/1] (0.00ns)   --->   "%a_V_addr_6 = getelementptr [10 x i4]* %a_V, i64 0, i64 6" [add/add.cpp:9]
ST_4 : Operation 48 [2/2] (0.54ns)   --->   "%a_V_load_6 = load i4* %a_V_addr_6, align 1" [add/add.cpp:9]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.54> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 4> <Depth = 10> <RAM>
ST_4 : Operation 49 [1/1] (0.00ns)   --->   "%b_V_addr_6 = getelementptr [10 x i4]* %b_V, i64 0, i64 6" [add/add.cpp:9]
ST_4 : Operation 50 [2/2] (0.54ns)   --->   "%b_V_load_6 = load i4* %b_V_addr_6, align 1" [add/add.cpp:9]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.54> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 4> <Depth = 10> <RAM>
ST_4 : Operation 51 [1/1] (0.00ns)   --->   "%a_V_addr_7 = getelementptr [10 x i4]* %a_V, i64 0, i64 7" [add/add.cpp:9]
ST_4 : Operation 52 [2/2] (0.54ns)   --->   "%a_V_load_7 = load i4* %a_V_addr_7, align 1" [add/add.cpp:9]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.54> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 4> <Depth = 10> <RAM>
ST_4 : Operation 53 [1/1] (0.00ns)   --->   "%b_V_addr_7 = getelementptr [10 x i4]* %b_V, i64 0, i64 7" [add/add.cpp:9]
ST_4 : Operation 54 [2/2] (0.54ns)   --->   "%b_V_load_7 = load i4* %b_V_addr_7, align 1" [add/add.cpp:9]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.54> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 4> <Depth = 10> <RAM>
ST_4 : Operation 55 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%tmp6 = add i4 %a_V_load_2, %b_V_load_3" [add/add.cpp:9]   --->   Core 80 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.16> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_4 : Operation 56 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%tmp8 = add i4 %b_V_load_4, %a_V_load_4" [add/add.cpp:9]   --->   Core 80 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.16> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_4 : Operation 57 [1/1] (0.33ns) (root node of TernaryAdder)   --->   "%tmp7 = add i4 %tmp8, %a_V_load_3" [add/add.cpp:9]   --->   Core 80 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.16> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_4 : Operation 58 [1/1] (0.33ns) (root node of TernaryAdder)   --->   "%tmp5 = add i4 %tmp7, %tmp6" [add/add.cpp:9]   --->   Core 80 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.16> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_4 : Operation 59 [1/1] (0.64ns)   --->   "%tmp11 = add i4 %b_V_load_5, %a_V_load_5" [add/add.cpp:9]   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 0.64> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>

 <State 5> : 0.88ns
ST_5 : Operation 60 [1/2] (0.54ns)   --->   "%a_V_load_6 = load i4* %a_V_addr_6, align 1" [add/add.cpp:9]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.54> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 4> <Depth = 10> <RAM>
ST_5 : Operation 61 [1/2] (0.54ns)   --->   "%b_V_load_6 = load i4* %b_V_addr_6, align 1" [add/add.cpp:9]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.54> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 4> <Depth = 10> <RAM>
ST_5 : Operation 62 [1/2] (0.54ns)   --->   "%a_V_load_7 = load i4* %a_V_addr_7, align 1" [add/add.cpp:9]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.54> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 4> <Depth = 10> <RAM>
ST_5 : Operation 63 [1/2] (0.54ns)   --->   "%b_V_load_7 = load i4* %b_V_addr_7, align 1" [add/add.cpp:9]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.54> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 4> <Depth = 10> <RAM>
ST_5 : Operation 64 [1/1] (0.00ns)   --->   "%a_V_addr_8 = getelementptr [10 x i4]* %a_V, i64 0, i64 8" [add/add.cpp:9]
ST_5 : Operation 65 [2/2] (0.54ns)   --->   "%a_V_load_8 = load i4* %a_V_addr_8, align 1" [add/add.cpp:9]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.54> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 4> <Depth = 10> <RAM>
ST_5 : Operation 66 [1/1] (0.00ns)   --->   "%b_V_addr_8 = getelementptr [10 x i4]* %b_V, i64 0, i64 8" [add/add.cpp:9]
ST_5 : Operation 67 [2/2] (0.54ns)   --->   "%b_V_load_8 = load i4* %b_V_addr_8, align 1" [add/add.cpp:9]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.54> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 4> <Depth = 10> <RAM>
ST_5 : Operation 68 [1/1] (0.00ns)   --->   "%a_V_addr_9 = getelementptr [10 x i4]* %a_V, i64 0, i64 9" [add/add.cpp:9]
ST_5 : Operation 69 [2/2] (0.54ns)   --->   "%a_V_load_9 = load i4* %a_V_addr_9, align 1" [add/add.cpp:9]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.54> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 4> <Depth = 10> <RAM>
ST_5 : Operation 70 [1/1] (0.00ns)   --->   "%b_V_addr_9 = getelementptr [10 x i4]* %b_V, i64 0, i64 9" [add/add.cpp:9]
ST_5 : Operation 71 [2/2] (0.54ns)   --->   "%b_V_load_9 = load i4* %b_V_addr_9, align 1" [add/add.cpp:9]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.54> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 4> <Depth = 10> <RAM>
ST_5 : Operation 72 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%tmp13 = add i4 %a_V_load_6, %b_V_load_7" [add/add.cpp:9]   --->   Core 80 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.16> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_5 : Operation 73 [1/1] (0.33ns) (root node of TernaryAdder)   --->   "%tmp12 = add i4 %tmp13, %b_V_load_6" [add/add.cpp:9]   --->   Core 80 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.16> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>

 <State 6> : 1.89ns
ST_6 : Operation 74 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap([10 x i4]* %a_V), !map !40"
ST_6 : Operation 75 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap([10 x i4]* %b_V), !map !46"
ST_6 : Operation 76 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i4* %out_V), !map !50"
ST_6 : Operation 77 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecTopModule([4 x i8]* @add_str) nounwind"
ST_6 : Operation 78 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, i32 0, [1 x i8]* @p_str) nounwind" [add/add.cpp:5]
ST_6 : Operation 79 [1/2] (0.54ns)   --->   "%a_V_load_8 = load i4* %a_V_addr_8, align 1" [add/add.cpp:9]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.54> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 4> <Depth = 10> <RAM>
ST_6 : Operation 80 [1/2] (0.54ns)   --->   "%b_V_load_8 = load i4* %b_V_addr_8, align 1" [add/add.cpp:9]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.54> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 4> <Depth = 10> <RAM>
ST_6 : Operation 81 [1/2] (0.54ns)   --->   "%a_V_load_9 = load i4* %a_V_addr_9, align 1" [add/add.cpp:9]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.54> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 4> <Depth = 10> <RAM>
ST_6 : Operation 82 [1/2] (0.54ns)   --->   "%b_V_load_9 = load i4* %b_V_addr_9, align 1" [add/add.cpp:9]   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 0.54> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 4> <Depth = 10> <RAM>
ST_6 : Operation 83 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%tmp = add i4 %tmp5, %tmp1" [add/add.cpp:9]   --->   Core 80 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.16> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_6 : Operation 84 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%tmp10 = add i4 %tmp12, %tmp11" [add/add.cpp:9]   --->   Core 80 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.16> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_6 : Operation 85 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%tmp15 = add i4 %a_V_load_7, %b_V_load_8" [add/add.cpp:9]   --->   Core 80 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.16> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_6 : Operation 86 [1/1] (0.00ns) (grouped into TernaryAdder)   --->   "%tmp17 = add i4 %b_V_load_9, %a_V_load_9" [add/add.cpp:9]   --->   Core 80 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.16> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_6 : Operation 87 [1/1] (0.33ns) (root node of TernaryAdder)   --->   "%tmp16 = add i4 %tmp17, %a_V_load_8" [add/add.cpp:9]   --->   Core 80 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.16> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_6 : Operation 88 [1/1] (0.33ns) (root node of TernaryAdder)   --->   "%tmp14 = add i4 %tmp16, %tmp15" [add/add.cpp:9]   --->   Core 80 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.16> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_6 : Operation 89 [1/1] (0.33ns) (root node of TernaryAdder)   --->   "%tmp9 = add i4 %tmp14, %tmp10" [add/add.cpp:9]   --->   Core 80 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.16> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_6 : Operation 90 [1/1] (0.33ns) (root node of TernaryAdder)   --->   "%tmp_1_9 = add i4 %tmp9, %tmp" [add/add.cpp:9]   --->   Core 80 'TAddSub' <Latency = 0> <II = 1> <Delay = 0.16> <IPBlock> <Opcode : 'add' 'sub'> <InPorts = 3> <OutPorts = 1> <Sync> <CReg>
ST_6 : Operation 91 [1/1] (0.00ns)   --->   "call void @_ssdm_op_Write.ap_auto.i4P(i4* %out_V, i4 %tmp_1_9)" [add/add.cpp:9]
ST_6 : Operation 92 [1/1] (0.00ns)   --->   "ret void" [add/add.cpp:10]


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 0.542ns
The critical path consists of the following:
	'getelementptr' operation ('a_V_addr', add/add.cpp:9) [9]  (0 ns)
	'load' operation ('a_V_load', add/add.cpp:9) on array 'a_V' [10]  (0.542 ns)

 <State 2>: 0.542ns
The critical path consists of the following:
	'load' operation ('a_V_load', add/add.cpp:9) on array 'a_V' [10]  (0.542 ns)

 <State 3>: 1.22ns
The critical path consists of the following:
	'load' operation ('b_V_load_2', add/add.cpp:9) on array 'b_V' [20]  (0.542 ns)
	'add' operation ('tmp4', add/add.cpp:9) [50]  (0 ns)
	'add' operation ('tmp3', add/add.cpp:9) [51]  (0.338 ns)
	'add' operation ('tmp1', add/add.cpp:9) [52]  (0.338 ns)

 <State 4>: 1.22ns
The critical path consists of the following:
	'load' operation ('a_V_load_4', add/add.cpp:9) on array 'a_V' [26]  (0.542 ns)
	'add' operation ('tmp8', add/add.cpp:9) [54]  (0 ns)
	'add' operation ('tmp7', add/add.cpp:9) [55]  (0.338 ns)
	'add' operation ('tmp5', add/add.cpp:9) [56]  (0.338 ns)

 <State 5>: 0.88ns
The critical path consists of the following:
	'load' operation ('a_V_load_6', add/add.cpp:9) on array 'a_V' [34]  (0.542 ns)
	'add' operation ('tmp13', add/add.cpp:9) [59]  (0 ns)
	'add' operation ('tmp12', add/add.cpp:9) [60]  (0.338 ns)

 <State 6>: 1.89ns
The critical path consists of the following:
	'load' operation ('a_V_load_8', add/add.cpp:9) on array 'a_V' [42]  (0.542 ns)
	'add' operation ('tmp16', add/add.cpp:9) [64]  (0.338 ns)
	'add' operation ('tmp14', add/add.cpp:9) [65]  (0.338 ns)
	'add' operation ('tmp9', add/add.cpp:9) [66]  (0.338 ns)
	'add' operation ('tmp_1_9', add/add.cpp:9) [67]  (0.338 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
