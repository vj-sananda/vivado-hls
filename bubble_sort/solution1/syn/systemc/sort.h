// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _sort_HH_
#define _sort_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct sort : public sc_module {
    // Port declarations 20
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<10> > a_address0;
    sc_out< sc_logic > a_ce0;
    sc_out< sc_logic > a_we0;
    sc_out< sc_lv<32> > a_d0;
    sc_in< sc_lv<32> > a_q0;
    sc_out< sc_lv<10> > a_address1;
    sc_out< sc_logic > a_ce1;
    sc_out< sc_logic > a_we1;
    sc_out< sc_lv<32> > a_d1;
    sc_in< sc_lv<32> > a_q1;
    sc_out< sc_lv<10> > out_r_address0;
    sc_out< sc_logic > out_r_ce0;
    sc_out< sc_logic > out_r_we0;
    sc_out< sc_lv<32> > out_r_d0;


    // Module declarations
    sort(sc_module_name name);
    SC_HAS_PROCESS(sort);

    ~sort();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<10> > j_1_fu_130_p2;
    sc_signal< sc_lv<10> > j_1_reg_181;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<10> > a_addr_reg_186;
    sc_signal< sc_lv<1> > exitcond1_fu_124_p2;
    sc_signal< sc_lv<10> > a_addr_1_reg_191;
    sc_signal< sc_lv<11> > i_fu_146_p2;
    sc_signal< sc_lv<10> > i_2_fu_164_p2;
    sc_signal< sc_lv<10> > i_2_reg_207;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<64> > tmp_5_fu_170_p1;
    sc_signal< sc_lv<64> > tmp_5_reg_212;
    sc_signal< sc_lv<1> > exitcond_fu_158_p2;
    sc_signal< sc_lv<11> > indvars_iv_reg_78;
    sc_signal< sc_lv<10> > j_reg_90;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > tmp_fu_112_p3;
    sc_signal< sc_lv<10> > i_1_reg_101;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<64> > tmp_1_fu_136_p1;
    sc_signal< sc_lv<64> > tmp_3_fu_141_p1;
    sc_signal< sc_lv<1> > tmp_4_fu_152_p2;
    sc_signal< sc_lv<11> > j_cast_fu_120_p1;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<11> ap_const_lv11_3E7;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<11> ap_const_lv11_7FF;
    static const sc_lv<10> ap_const_lv10_3E8;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_a_address0();
    void thread_a_address1();
    void thread_a_ce0();
    void thread_a_ce1();
    void thread_a_d0();
    void thread_a_d1();
    void thread_a_we0();
    void thread_a_we1();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_exitcond1_fu_124_p2();
    void thread_exitcond_fu_158_p2();
    void thread_i_2_fu_164_p2();
    void thread_i_fu_146_p2();
    void thread_j_1_fu_130_p2();
    void thread_j_cast_fu_120_p1();
    void thread_out_r_address0();
    void thread_out_r_ce0();
    void thread_out_r_d0();
    void thread_out_r_we0();
    void thread_tmp_1_fu_136_p1();
    void thread_tmp_3_fu_141_p1();
    void thread_tmp_4_fu_152_p2();
    void thread_tmp_5_fu_170_p1();
    void thread_tmp_fu_112_p3();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
