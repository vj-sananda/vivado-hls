// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "sort.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sort::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sort::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> sort::ap_ST_fsm_state1 = "1";
const sc_lv<6> sort::ap_ST_fsm_state2 = "10";
const sc_lv<6> sort::ap_ST_fsm_state3 = "100";
const sc_lv<6> sort::ap_ST_fsm_state4 = "1000";
const sc_lv<6> sort::ap_ST_fsm_state5 = "10000";
const sc_lv<6> sort::ap_ST_fsm_state6 = "100000";
const sc_lv<32> sort::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> sort::ap_const_lv32_2 = "10";
const sc_lv<1> sort::ap_const_lv1_0 = "0";
const sc_lv<1> sort::ap_const_lv1_1 = "1";
const sc_lv<32> sort::ap_const_lv32_4 = "100";
const sc_lv<11> sort::ap_const_lv11_3E7 = "1111100111";
const sc_lv<32> sort::ap_const_lv32_3 = "11";
const sc_lv<10> sort::ap_const_lv10_0 = "0000000000";
const sc_lv<32> sort::ap_const_lv32_1 = "1";
const sc_lv<32> sort::ap_const_lv32_5 = "101";
const sc_lv<32> sort::ap_const_lv32_A = "1010";
const sc_lv<10> sort::ap_const_lv10_1 = "1";
const sc_lv<11> sort::ap_const_lv11_7FF = "11111111111";
const sc_lv<10> sort::ap_const_lv10_3E8 = "1111101000";
const bool sort::ap_const_boolean_1 = true;

sort::sort(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( a_addr_reg_186 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_5_fu_170_p1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_1_fu_136_p1 );

    SC_METHOD(thread_a_address1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( a_addr_1_reg_191 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_3_fu_141_p1 );

    SC_METHOD(thread_a_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_a_ce1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_a_d0);
    sensitive << ( a_q1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_a_d1);
    sensitive << ( a_q0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_a_we0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_4_fu_152_p2 );

    SC_METHOD(thread_a_we1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_4_fu_152_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond_fu_158_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond_fu_158_p2 );

    SC_METHOD(thread_exitcond1_fu_124_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( indvars_iv_reg_78 );
    sensitive << ( j_cast_fu_120_p1 );

    SC_METHOD(thread_exitcond_fu_158_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( i_1_reg_101 );

    SC_METHOD(thread_i_2_fu_164_p2);
    sensitive << ( i_1_reg_101 );

    SC_METHOD(thread_i_fu_146_p2);
    sensitive << ( indvars_iv_reg_78 );

    SC_METHOD(thread_j_1_fu_130_p2);
    sensitive << ( j_reg_90 );

    SC_METHOD(thread_j_cast_fu_120_p1);
    sensitive << ( j_reg_90 );

    SC_METHOD(thread_out_r_address0);
    sensitive << ( tmp_5_reg_212 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_out_r_ce0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_out_r_d0);
    sensitive << ( a_q0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_out_r_we0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_tmp_1_fu_136_p1);
    sensitive << ( j_reg_90 );

    SC_METHOD(thread_tmp_3_fu_141_p1);
    sensitive << ( j_1_fu_130_p2 );

    SC_METHOD(thread_tmp_4_fu_152_p2);
    sensitive << ( a_q0 );
    sensitive << ( a_q1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_tmp_5_fu_170_p1);
    sensitive << ( i_1_reg_101 );

    SC_METHOD(thread_tmp_fu_112_p3);
    sensitive << ( indvars_iv_reg_78 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond1_fu_124_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond_fu_158_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_fu_112_p3 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sort_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a_address0, "(port)a_address0");
    sc_trace(mVcdFile, a_ce0, "(port)a_ce0");
    sc_trace(mVcdFile, a_we0, "(port)a_we0");
    sc_trace(mVcdFile, a_d0, "(port)a_d0");
    sc_trace(mVcdFile, a_q0, "(port)a_q0");
    sc_trace(mVcdFile, a_address1, "(port)a_address1");
    sc_trace(mVcdFile, a_ce1, "(port)a_ce1");
    sc_trace(mVcdFile, a_we1, "(port)a_we1");
    sc_trace(mVcdFile, a_d1, "(port)a_d1");
    sc_trace(mVcdFile, a_q1, "(port)a_q1");
    sc_trace(mVcdFile, out_r_address0, "(port)out_r_address0");
    sc_trace(mVcdFile, out_r_ce0, "(port)out_r_ce0");
    sc_trace(mVcdFile, out_r_we0, "(port)out_r_we0");
    sc_trace(mVcdFile, out_r_d0, "(port)out_r_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, j_1_fu_130_p2, "j_1_fu_130_p2");
    sc_trace(mVcdFile, j_1_reg_181, "j_1_reg_181");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, a_addr_reg_186, "a_addr_reg_186");
    sc_trace(mVcdFile, exitcond1_fu_124_p2, "exitcond1_fu_124_p2");
    sc_trace(mVcdFile, a_addr_1_reg_191, "a_addr_1_reg_191");
    sc_trace(mVcdFile, i_fu_146_p2, "i_fu_146_p2");
    sc_trace(mVcdFile, i_2_fu_164_p2, "i_2_fu_164_p2");
    sc_trace(mVcdFile, i_2_reg_207, "i_2_reg_207");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_5_fu_170_p1, "tmp_5_fu_170_p1");
    sc_trace(mVcdFile, tmp_5_reg_212, "tmp_5_reg_212");
    sc_trace(mVcdFile, exitcond_fu_158_p2, "exitcond_fu_158_p2");
    sc_trace(mVcdFile, indvars_iv_reg_78, "indvars_iv_reg_78");
    sc_trace(mVcdFile, j_reg_90, "j_reg_90");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_fu_112_p3, "tmp_fu_112_p3");
    sc_trace(mVcdFile, i_1_reg_101, "i_1_reg_101");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, tmp_1_fu_136_p1, "tmp_1_fu_136_p1");
    sc_trace(mVcdFile, tmp_3_fu_141_p1, "tmp_3_fu_141_p1");
    sc_trace(mVcdFile, tmp_4_fu_152_p2, "tmp_4_fu_152_p2");
    sc_trace(mVcdFile, j_cast_fu_120_p1, "j_cast_fu_120_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("sort.hdltvin.dat");
    mHdltvoutHandle.open("sort.hdltvout.dat");
}

sort::~sort() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void sort::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_112_p3.read()))) {
        i_1_reg_101 = ap_const_lv10_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        i_1_reg_101 = i_2_reg_207.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        indvars_iv_reg_78 = ap_const_lv11_3E7;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                esl_seteq<1,1,1>(exitcond1_fu_124_p2.read(), ap_const_lv1_1))) {
        indvars_iv_reg_78 = i_fu_146_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, tmp_fu_112_p3.read()))) {
        j_reg_90 = ap_const_lv10_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        j_reg_90 = j_1_reg_181.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond1_fu_124_p2.read(), ap_const_lv1_0))) {
        a_addr_1_reg_191 =  (sc_lv<10>) (tmp_3_fu_141_p1.read());
        a_addr_reg_186 =  (sc_lv<10>) (tmp_1_fu_136_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i_2_reg_207 = i_2_fu_164_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_1_reg_181 = j_1_fu_130_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_158_p2.read()))) {
        tmp_5_reg_212 = tmp_5_fu_170_p1.read();
    }
}

void sort::thread_a_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        a_address0 =  (sc_lv<10>) (tmp_5_fu_170_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        a_address0 = a_addr_reg_186.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        a_address0 =  (sc_lv<10>) (tmp_1_fu_136_p1.read());
    } else {
        a_address0 = "XXXXXXXXXX";
    }
}

void sort::thread_a_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        a_address1 = a_addr_1_reg_191.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        a_address1 =  (sc_lv<10>) (tmp_3_fu_141_p1.read());
    } else {
        a_address1 = "XXXXXXXXXX";
    }
}

void sort::thread_a_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        a_ce0 = ap_const_logic_1;
    } else {
        a_ce0 = ap_const_logic_0;
    }
}

void sort::thread_a_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        a_ce1 = ap_const_logic_1;
    } else {
        a_ce1 = ap_const_logic_0;
    }
}

void sort::thread_a_d0() {
    a_d0 = a_q1.read();
}

void sort::thread_a_d1() {
    a_d1 = a_q0.read();
}

void sort::thread_a_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_4_fu_152_p2.read()))) {
        a_we0 = ap_const_logic_1;
    } else {
        a_we0 = ap_const_logic_0;
    }
}

void sort::thread_a_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_4_fu_152_p2.read()))) {
        a_we1 = ap_const_logic_1;
    } else {
        a_we1 = ap_const_logic_0;
    }
}

void sort::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void sort::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void sort::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void sort::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void sort::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void sort::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void sort::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_158_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void sort::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void sort::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_158_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void sort::thread_exitcond1_fu_124_p2() {
    exitcond1_fu_124_p2 = (!j_cast_fu_120_p1.read().is_01() || !indvars_iv_reg_78.read().is_01())? sc_lv<1>(): sc_lv<1>(j_cast_fu_120_p1.read() == indvars_iv_reg_78.read());
}

void sort::thread_exitcond_fu_158_p2() {
    exitcond_fu_158_p2 = (!i_1_reg_101.read().is_01() || !ap_const_lv10_3E8.is_01())? sc_lv<1>(): sc_lv<1>(i_1_reg_101.read() == ap_const_lv10_3E8);
}

void sort::thread_i_2_fu_164_p2() {
    i_2_fu_164_p2 = (!i_1_reg_101.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(i_1_reg_101.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void sort::thread_i_fu_146_p2() {
    i_fu_146_p2 = (!indvars_iv_reg_78.read().is_01() || !ap_const_lv11_7FF.is_01())? sc_lv<11>(): (sc_biguint<11>(indvars_iv_reg_78.read()) + sc_bigint<11>(ap_const_lv11_7FF));
}

void sort::thread_j_1_fu_130_p2() {
    j_1_fu_130_p2 = (!j_reg_90.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(j_reg_90.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void sort::thread_j_cast_fu_120_p1() {
    j_cast_fu_120_p1 = esl_zext<11,10>(j_reg_90.read());
}

void sort::thread_out_r_address0() {
    out_r_address0 =  (sc_lv<10>) (tmp_5_reg_212.read());
}

void sort::thread_out_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        out_r_ce0 = ap_const_logic_1;
    } else {
        out_r_ce0 = ap_const_logic_0;
    }
}

void sort::thread_out_r_d0() {
    out_r_d0 = a_q0.read();
}

void sort::thread_out_r_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        out_r_we0 = ap_const_logic_1;
    } else {
        out_r_we0 = ap_const_logic_0;
    }
}

void sort::thread_tmp_1_fu_136_p1() {
    tmp_1_fu_136_p1 = esl_zext<64,10>(j_reg_90.read());
}

void sort::thread_tmp_3_fu_141_p1() {
    tmp_3_fu_141_p1 = esl_zext<64,10>(j_1_fu_130_p2.read());
}

void sort::thread_tmp_4_fu_152_p2() {
    tmp_4_fu_152_p2 = (!a_q0.read().is_01() || !a_q1.read().is_01())? sc_lv<1>(): (sc_bigint<32>(a_q0.read()) > sc_bigint<32>(a_q1.read()));
}

void sort::thread_tmp_5_fu_170_p1() {
    tmp_5_fu_170_p1 = esl_zext<64,10>(i_1_reg_101.read());
}

void sort::thread_tmp_fu_112_p3() {
    tmp_fu_112_p3 = indvars_iv_reg_78.read().range(10, 10);
}

void sort::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_fu_112_p3.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond1_fu_124_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_158_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<6>) ("XXXXXX");
            break;
    }
}

void sort::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_address0\" :  \"" << a_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_ce0\" :  \"" << a_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_we0\" :  \"" << a_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_d0\" :  \"" << a_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_q0\" :  \"" << a_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_address1\" :  \"" << a_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_ce1\" :  \"" << a_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_we1\" :  \"" << a_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"a_d1\" :  \"" << a_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_q1\" :  \"" << a_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_address0\" :  \"" << out_r_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_ce0\" :  \"" << out_r_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_we0\" :  \"" << out_r_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_d0\" :  \"" << out_r_d0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

