// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _sub_func_HH_
#define _sub_func_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct sub_func : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<5> > I_address0;
    sc_out< sc_logic > I_ce0;
    sc_in< sc_lv<8> > I_q0;
    sc_out< sc_lv<5> > O_address0;
    sc_out< sc_logic > O_ce0;
    sc_out< sc_logic > O_we0;
    sc_out< sc_lv<13> > O_d0;
    sc_in< sc_lv<5> > limit;


    // Module declarations
    sub_func(sc_module_name name);
    SC_HAS_PROCESS(sub_func);

    ~sub_func();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<5> > i_1_fu_82_p2;
    sc_signal< sc_lv<5> > i_1_reg_112;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<64> > tmp_1_fu_88_p1;
    sc_signal< sc_lv<64> > tmp_1_reg_117;
    sc_signal< sc_lv<1> > exitcond_fu_77_p2;
    sc_signal< sc_lv<13> > accum_1_fu_97_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<5> > i_reg_54;
    sc_signal< sc_lv<13> > accum_reg_65;
    sc_signal< sc_lv<13> > tmp_2_fu_93_p1;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<13> ap_const_lv13_0;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_I_address0();
    void thread_I_ce0();
    void thread_O_address0();
    void thread_O_ce0();
    void thread_O_d0();
    void thread_O_we0();
    void thread_accum_1_fu_97_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_exitcond_fu_77_p2();
    void thread_i_1_fu_82_p2();
    void thread_tmp_1_fu_88_p1();
    void thread_tmp_2_fu_93_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
