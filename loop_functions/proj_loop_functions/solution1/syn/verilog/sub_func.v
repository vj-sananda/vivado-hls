// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sub_func (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        I_address0,
        I_ce0,
        I_q0,
        O_address0,
        O_ce0,
        O_we0,
        O_d0,
        limit
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] I_address0;
output   I_ce0;
input  [7:0] I_q0;
output  [4:0] O_address0;
output   O_ce0;
output   O_we0;
output  [12:0] O_d0;
input  [4:0] limit;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg I_ce0;
reg O_ce0;
reg O_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] i_1_fu_82_p2;
reg   [4:0] i_1_reg_112;
wire    ap_CS_fsm_state2;
wire   [63:0] tmp_1_fu_88_p1;
reg   [63:0] tmp_1_reg_117;
wire   [0:0] exitcond_fu_77_p2;
wire   [12:0] accum_1_fu_97_p2;
wire    ap_CS_fsm_state3;
reg   [4:0] i_reg_54;
reg   [12:0] accum_reg_65;
wire  signed [12:0] tmp_2_fu_93_p1;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        accum_reg_65 <= accum_1_fu_97_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        accum_reg_65 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_54 <= i_1_reg_112;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_reg_54 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_112 <= i_1_fu_82_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_77_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_1_reg_117[4 : 0] <= tmp_1_fu_88_p1[4 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        I_ce0 = 1'b1;
    end else begin
        I_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        O_ce0 = 1'b1;
    end else begin
        O_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        O_we0 = 1'b1;
    end else begin
        O_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond_fu_77_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_77_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_fu_77_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign I_address0 = tmp_1_fu_88_p1;

assign O_address0 = tmp_1_reg_117;

assign O_d0 = ($signed(tmp_2_fu_93_p1) + $signed(accum_reg_65));

assign accum_1_fu_97_p2 = ($signed(tmp_2_fu_93_p1) + $signed(accum_reg_65));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign exitcond_fu_77_p2 = ((i_reg_54 == limit) ? 1'b1 : 1'b0);

assign i_1_fu_82_p2 = (i_reg_54 + 5'd1);

assign tmp_1_fu_88_p1 = i_reg_54;

assign tmp_2_fu_93_p1 = $signed(I_q0);

always @ (posedge ap_clk) begin
    tmp_1_reg_117[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //sub_func
