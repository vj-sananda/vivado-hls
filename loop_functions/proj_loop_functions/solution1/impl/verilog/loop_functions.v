// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="loop_functions,hls_ip_2017_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=25.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.660250,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=66,HLS_SYN_LUT=193}" *)

module loop_functions (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        X_address0,
        X_ce0,
        X_we0,
        X_d0,
        Y_address0,
        Y_ce0,
        Y_we0,
        Y_d0,
        xlimit,
        ylimit
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] A_address0;
output   A_ce0;
input  [7:0] A_q0;
output  [4:0] B_address0;
output   B_ce0;
input  [7:0] B_q0;
output  [4:0] X_address0;
output   X_ce0;
output   X_we0;
output  [12:0] X_d0;
output  [4:0] Y_address0;
output   Y_ce0;
output   Y_we0;
output  [12:0] Y_d0;
input  [4:0] xlimit;
input  [4:0] ylimit;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    grp_sub_func_fu_34_ap_start;
wire    grp_sub_func_fu_34_ap_done;
wire    grp_sub_func_fu_34_ap_idle;
wire    grp_sub_func_fu_34_ap_ready;
wire   [4:0] grp_sub_func_fu_34_I_address0;
wire    grp_sub_func_fu_34_I_ce0;
wire   [4:0] grp_sub_func_fu_34_O_address0;
wire    grp_sub_func_fu_34_O_ce0;
wire    grp_sub_func_fu_34_O_we0;
wire   [12:0] grp_sub_func_fu_34_O_d0;
wire    grp_sub_func_fu_44_ap_start;
wire    grp_sub_func_fu_44_ap_done;
wire    grp_sub_func_fu_44_ap_idle;
wire    grp_sub_func_fu_44_ap_ready;
wire   [4:0] grp_sub_func_fu_44_I_address0;
wire    grp_sub_func_fu_44_I_ce0;
wire   [4:0] grp_sub_func_fu_44_O_address0;
wire    grp_sub_func_fu_44_O_ce0;
wire    grp_sub_func_fu_44_O_we0;
wire   [12:0] grp_sub_func_fu_44_O_d0;
reg    ap_reg_grp_sub_func_fu_34_ap_start;
wire    ap_CS_fsm_state2;
reg    ap_reg_grp_sub_func_fu_44_ap_start;
reg    ap_block_state2_on_subcall_done;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_reg_grp_sub_func_fu_34_ap_start = 1'b0;
#0 ap_reg_grp_sub_func_fu_44_ap_start = 1'b0;
end

sub_func grp_sub_func_fu_34(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sub_func_fu_34_ap_start),
    .ap_done(grp_sub_func_fu_34_ap_done),
    .ap_idle(grp_sub_func_fu_34_ap_idle),
    .ap_ready(grp_sub_func_fu_34_ap_ready),
    .I_address0(grp_sub_func_fu_34_I_address0),
    .I_ce0(grp_sub_func_fu_34_I_ce0),
    .I_q0(A_q0),
    .O_address0(grp_sub_func_fu_34_O_address0),
    .O_ce0(grp_sub_func_fu_34_O_ce0),
    .O_we0(grp_sub_func_fu_34_O_we0),
    .O_d0(grp_sub_func_fu_34_O_d0),
    .limit(xlimit)
);

sub_func grp_sub_func_fu_44(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sub_func_fu_44_ap_start),
    .ap_done(grp_sub_func_fu_44_ap_done),
    .ap_idle(grp_sub_func_fu_44_ap_idle),
    .ap_ready(grp_sub_func_fu_44_ap_ready),
    .I_address0(grp_sub_func_fu_44_I_address0),
    .I_ce0(grp_sub_func_fu_44_I_ce0),
    .I_q0(B_q0),
    .O_address0(grp_sub_func_fu_44_O_address0),
    .O_ce0(grp_sub_func_fu_44_O_ce0),
    .O_we0(grp_sub_func_fu_44_O_we0),
    .O_d0(grp_sub_func_fu_44_O_d0),
    .limit(ylimit)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_sub_func_fu_34_ap_start <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_reg_grp_sub_func_fu_34_ap_start <= 1'b1;
        end else if ((grp_sub_func_fu_34_ap_ready == 1'b1)) begin
            ap_reg_grp_sub_func_fu_34_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_sub_func_fu_44_ap_start <= 1'b0;
    end else begin
        if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_reg_grp_sub_func_fu_44_ap_start <= 1'b1;
        end else if ((grp_sub_func_fu_44_ap_ready == 1'b1)) begin
            ap_reg_grp_sub_func_fu_44_ap_start <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = grp_sub_func_fu_34_I_address0;

assign A_ce0 = grp_sub_func_fu_34_I_ce0;

assign B_address0 = grp_sub_func_fu_44_I_address0;

assign B_ce0 = grp_sub_func_fu_44_I_ce0;

assign X_address0 = grp_sub_func_fu_34_O_address0;

assign X_ce0 = grp_sub_func_fu_34_O_ce0;

assign X_d0 = grp_sub_func_fu_34_O_d0;

assign X_we0 = grp_sub_func_fu_34_O_we0;

assign Y_address0 = grp_sub_func_fu_44_O_address0;

assign Y_ce0 = grp_sub_func_fu_44_O_ce0;

assign Y_d0 = grp_sub_func_fu_44_O_d0;

assign Y_we0 = grp_sub_func_fu_44_O_we0;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state2_on_subcall_done = ((grp_sub_func_fu_44_ap_done == 1'b0) | (grp_sub_func_fu_34_ap_done == 1'b0));
end

assign grp_sub_func_fu_34_ap_start = ap_reg_grp_sub_func_fu_34_ap_start;

assign grp_sub_func_fu_44_ap_start = ap_reg_grp_sub_func_fu_44_ap_start;

endmodule //loop_functions
